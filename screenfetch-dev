#!/bin/bash

#
# screenFetch (v2.1.3)
#
# Script to fetch system and theme settings for screenshots in most mainstream
# Linux distributions.
# This script is copyright (C) 2010 to Brett Bohnenkamper (kittykatt@silverirc.com)
# Do not make any modifications to this script without my explicit permission.
# Do NOT claim this script as your own. I will find you.
#
# Yes, I do realize some of this is horribly ugly coding. Any ideas/suggestions would be
# appreciated by emailing me or by stopping by http://github.com/KittyKatt/screeFetch . You
# could also drop in on my IRC network, SilverIRC, at irc://kittykatt.silverirc.com:6667/meowz
# to put forth suggestions/ideas. Thank you.
#

scriptVersion="2.1.3"

######################
# Settings for fetcher
######################

# This setting controls what ASCII logo is displayed. Available: Arch Linux (Old and Current Logos), Linux Mint, Ubuntu, Crunchbang, Debian, Gentoo, Mandrake/Mandriva, Slackware, SUSE, Fedora, BSD, and None
# distro="Arch Linux"

# This sets the information to be displayed. Available: OS, Kernel, DE, WM, Win_theme, Theme, Icons, Font, Background, ASCII. To get just the information, and not a text-art logo, you would take "ASCII" out of the below variable.
display="Host OS Kernel Uptime Shell Resolution DE WM Win_theme Theme Icons Font ASCII Background"

# Colors to use for the information found. These are set below according to distribution. If you would like to set your OWN color scheme for these, uncomment the lines below and edit them to your heart's content.
# textcolor="\e[0m"
# labelcolor="\e[1;34m"

# WM & DE process names
wmnames="fluxbox openbox blackbox xfwm4 metacity kwin icewm pekwm fvwm dwm awesome WindowMaker stumpwm compiz xmonad musca i3 ratpoison scrotwm wmfs wmii beryl"
denames="gnome-session xfce-mcs-manage xfce4-session xfconfd ksmserver lxsession gnome-settings-daemon"

# Export theme settings
# screenFetch has the capability (on some WM's and GTK) to export your GTK and WM settings to an archive. Specify Yes if you want this and No if you do not.
exportTheme=

# Screenshot Settings
# This setting lets the script know if you want to take a screenshot or not. 1=Yes 0=No
screenshot=
# You can specify a custom screenshot command here. Just uncomment and edit. Otherwise, we'll be using the default command: scrot -cd3.
# screenCommand="scrot -cd5"
hostshot=
baseurl="http://www.example.com"
serveraddr="www.example.com"
scptimeout="20"
serverdir="/path/to/directory"
shotfile=$(echo "screenFetch-`date +'%Y-%m-%d'`.png")

# Verbose Setting - Set to 1 for verbose output.
verbosity=

verboseOut () {
  echo -e "\e[1;31m:: \e[0m$1"
}

errorOut () {
  echo -e "\e[1;37m[[ \e[1;31m! \e[1;37m]] \e[0m$1"
}

#############################################
#### CODE No need to edit past here CODE ####
#############################################

####################
# Static Variables
####################
c0="\e[0m" # Reset Text
bold="\e[1m" # Bold Text
underline="\e[4m" # Underline Text


#####################
# Begin Flags Phase
#####################

while getopts ":hsmevVntlc:D:o:" flags; do
  case $flags in
    h)
      echo -e "${underline}Usage${c0}:"
      echo -e "  screenFetch [OPTIONAL FLAGS]"
      echo ""
      echo "screenFetch - a CLI Bash script to show system/theme info in screenshots."
      echo ""
      echo -e "${underline}Supported Distributions${c0}:      Arch Linux (Old and Current Logos), Linux Mint,"
      echo -e "			      Ubuntu, Crunchbang, Debian, Gentoo, Fedora,"
      echo -e "			      Mandrake/Mandriva, Slackware, SUSE, and BSD"
      echo -e "${underline}Supported Desktop Managers${c0}:   KDE, GNOME, XFCE, and LXDE, and Not Present"
      echo -e "${underline}Supported Window Managers${c0}:    PekWM, OpenBox, FluxBox, BlackBox, Xfwm4,"
      echo -e "			      Metacity, Compiz, StumpWM, KWin, IceWM, FVWM,"
      echo -e "			      DWM, Awesome, XMonad, Musca, i3, WindowMaker,"
      echo -e "			      Ratpoison, wmii, Wmfs, ScrotWM, and Beryl."
      echo ""
      echo -e "${underline}Options${c0}:"
      echo -e "   ${bold}-v${c0}                 Verbose output."
      echo -e "   ${bold}-o 'OPTIONS'${c0}       Allows for setting script variables on the"
      echo -e "		      command line. Must be in the following format..."
      echo -e "		      'OPTION1=\"OPTIONARG1\";OPTION2=\"OPTIONARG2\"'"
      #echo -e "   ${bold}-d 'ARGUMENTS'${c0}     Allows for setting what information is displayed"
      #echo -e "		      on the command line. Format must be as follows:"
      #echo -e "		      'OPTION OPTION OPTION OPTION'. Valid options are"
      #echo -e "		      Host, OS, Kernel, Uptime, Shell, Resolution, DE, WM,"
      #echo -e "		      Win_theme, Theme, Icons, Font, ASCII, Background."
      echo -e "   ${bold}-n${c0}                 Do no display ASCII distribution logo."
      echo -e "   ${bold}-t${c0}                 Truncate output based on terminal width (Experimental!)."
      echo -e "   ${bold}-s(m)${c0}              Using this flag tells the script that you want it"
      echo -e "		      to take a screenshot. Use the -m flag if you would like"
      echo -e "		      to move it to a new location afterwards."
      echo -e "   ${bold}-e${c0}                 When this flag is specified, screenFetch will attempt"
      echo -e "		      to export all of your theme settings and archive them"
      echo -e "		      up for uploading."
      echo -e "   ${bold}-l${c0}                 Specify that you have a light background. This turns"
      echo -e "		      all white text into dark gray text (in ascii logos and"
      echo -e "		      in information output)."
      echo -e "   ${bold}-c 'COMMAND'${c0}       Here you can specify a custom screenshot command for"
      echo -e "		      the script to execute. Surrounding quotes are required."
      echo -e "   ${bold}-D 'DISTRO'${c0}        Here you can specify your distribution for the script"
      echo -e "		      to use. Surrounding quotes are required."
      echo -e "   ${bold}-V${c0}                 Display current script version."
      echo -e "   ${bold}-h${c0}                 Display this help."
      exit
    ;;
    s) screenshot=1; continue;;
    m) hostshot=1; continue;;
    e) exportTheme=1; continue;;
    v) verbosity=1; continue;;
    V)
      echo -e $underline"screenFetch"$c0" - Version $scriptVersion"
      echo "Copyright (C) Brett Bohnenkamper (kittykatt@silverirc.com)"
      echo ""
      echo "This is free software; see the source for copying conditions.  There is NO
warranty; not even MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
      exit
    ;;
    D) distro=$OPTARG; continue;;
    t) truncateSet="Yes";;
    c) screenCommand=$OPTARG; continue;;
    n) display=${display//ASCII/};;
    o) overrideOpts=$OPTARG; continue;;
    # d) overrideDisplay=$OPTARG; continue;;
    l) c1="\e[1;30m";;
    :) errorOut "Error: You're missing an argument somewhere. Exiting."; exit;;
    ?) errorOut "Error: Invalid flag somewhere. Exiting."; exit;;
    *) errorOut "Error"; exit;;
  esac
 done

###################
# End Flags Phase
###################


####################
# Override Options
####################

if [[ "$overrideOpts" ]]; then
  [[ "$verbosity" -eq "1" ]] && verboseOut "Found 'o' flag in syntax. Overriding some script variables..."
  OLD_IFS="$IFS"
  IFS=";"
  for overopt in "$overrideOpts"; do
    eval "$overrideOpts"
  done
  IFS="$OLD_IFS"
fi
#if [[ "$overrideDisplay" ]]; then
#  [[ "$verbosity" -eq "1" ]] && verboseOut "Found 'd' flag in syntax. Overriding some display options..."
#  display="$overrideDisplay"
#fi


#########################
# Begin Detection Phase
#########################
    

# Host and User detection - Begin
detecthost () {
  myUser=$(echo "$USER")
  myHost=$(hostname)
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding hostname and user...found as '$myUser@$myHost'"
}

# Distro Detection - Begin
detectdistro () {
  if [[ -z $distro ]]; then
    distro="Unknown"
    if grep -i debian /etc/lsb-release >/dev/null 2>&1; then distro="Debian"; fi
    if [ -f /etc/debian_version ]; then distro="Debian"; fi
    if grep -i ubuntu /etc/lsb-release >/dev/null 2>&1; then distro="Ubuntu"; fi
    if grep -i mint /etc/lsb-release >/dev/null 2>&1; then distro="Linux Mint"; fi
    if [ -f /etc/arch-release ]; then distro="Arch Linux"; fi
    if [ -f /etc/fedora-release ]; then distro="Fedora"; fi
    if [ -f /etc/redhat-release ]; then distro="Red Hat Linux"; fi
    if [ -f /etc/slackware-version ]; then distro="Slackware"; fi
    if [ -f /etc/SUSE-release ]; then distro="SUSE"; fi
    if [ -f /etc/mandrake-release ]; then distro="Mandrake"; fi
    if [ -f /etc/mandriva-release ]; then distro="Mandriva"; fi
    if [ -f /etc/crunchbang-lsb-release ]; then distro="Crunchbang"; fi
    if [ `lsb-release -i` =~ "Crunchbang" ]; then distro="Crunchbang"; fi
    if [ -f /etc/gentoo-release ]; then distro="Gentoo"; fi
    if [ -f /var/run/dmesg.boot ] && grep -i bsd /var/run/dmesg.boot; then distro="BSD"; fi
    if [ -f /usr/share/doc/tc/release.txt ]; then distro="Tiny Core"; fi
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding distro...found as '$distro'"
}
# Distro Detection - End

# Find Number of Running Processes
processnum="$(( $( ps aux | wc -l ) - 1 ))"

# Kernel Version Detection - Begin
detectkernel () {
  kernel=`uname -r`
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding kernel version...found as '$kernel'"
}
# Kernel Version Detection - End


# Uptime Detection - Begin
detectuptime () {
  uptime=`awk -F. '{print $1}' /proc/uptime`
  secs=$((${uptime}%60))
  mins=$((${uptime}/60%60))
  hours=$((${uptime}/3600%24))
  days=$((${uptime}/86400))
  uptime="${mins}m"
  if [ "${hours}" -ne "0" ]; then
    uptime="${hours}h ${uptime}"
    if [ "${days}" -ne "0" ]; then
      uptime="${days}d ${uptime}"
    fi
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current uptime...found as '$uptime'"
}
# Uptime Detection - End


# Shell Detection - Begin
detectshell () {
  myShell=$(echo $SHELL | awk -F"/" '{print $NF}')
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current shell...found as '$myShell'"
}
# Shell Detection - End


# Resolution Detection - Begin
detectres () {
  if [[ `ps ax | grep bin/X` ]]; then
    old_IFS=$IFS      # save the field separator   
    IFS=$'\n'     # new field separator, the end of line   
    for line in $(xdpyinfo | grep dim)
    do
      if [[ -z $xResolution ]]; then
        xSingleres=$(echo "$line" | awk '/  dimensions:  /{print $2}' | sed 's/^ //')
        xResolution=$(echo "$xResolution $xSingleres")
      else
        xResolution=$(echo "$line" | awk '/  dimensions:  /{print $2}' | sed 's/^ //')
      fi
    done
    IFS=$old_IFS     # restore default field separator 
  else
    xResolution="Not Found"
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current resolution(s)...found as '$xResolution'"
}
# Resolution Detection - End


# DE Detection - Begin
detectde () {
  DE="Not Present"
  userId="$(id -u ${USER})"
  for each in $denames; do
    PID="$(pgrep -U ${userId} $each)"
    if [ "$PID" ]; then
      [ "$each" == "gnome-session" -o "$each" == "gnome-settings-daemon" ] && DE="GNOME" && DEver=$(gnome-session --version | awk {'print $NF'})
      # [ "$each" == "xfce-mcs-manage" -o "$each" == "xfce4-session" -o "$each" == "xfconfd" ] && DE="XFCE" && DEver=$(xfce4-settings-manager --version | grep -m 1 "" | awk {'print $2'})
      [ "$each" == "xfce4-session" ] && DE="XFCE" && DEver=$(xfce4-settings-manager --version | grep -m 1 "" | awk {'print $2'})
      [ "$each" == "ksmserver" ] && DE="KDE" && DEver=$(kwin --version | awk '/^Qt/ {data="Qt v" $2};/^KDE/ {data=$2 " (" data ")"};END{print data}')
      [ "$each" == "lxsession" ] && DE="LXDE"
    fi
  done
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding desktop environment...found as '$DE'"
}
### DE Detection - End


# WM Detection - Begin
detectwm () {
  WM="Not Found"
  userId="$(id -u ${USER})"
  for each in $wmnames; do
    PID="$(pgrep -U ${userId} $each)"
    if [ "$PID" ]; then
      case $each in
        'fluxbox') WM="FluxBox";;
        'openbox') WM="OpenBox";;
        'blackbox') WM="Blackbox";;
        'xfwm4') WM="Xfwm4";;
        'metacity') WM="Metacity";;
        'kwin') WM="KWin";;
        'icewm') WM="IceWM";;
        'pekwm') WM="PekWM";;
        'fvwm') WM="FVWM";;
        'dwm') WM="DWM";;
        'awesome') WM="Awesome";;
        'WindowMaker') WM="WindowMaker";;
        'compiz') WM="Compiz";;
	'stumpwm') WM="StumpWM";;
	'xmonad') WM="XMonad";;
	'musca') WM="Musca";;
	'i3') WM="i3";;
	'ratpoison') WM="Ratpoison";;
	'scrotwm') WM="ScrotWM";;
	'wmfs') WM="Wmfs";;
	'wmii') WM="wmii";;
	'beryl') WM="Beryl";;
      esac
    fi
  done
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding window manager...found as '$WM'"
}
# WM Detection - End


# WM Theme Detection - BEGIN
detectwmtheme () {
  Win_theme="Not Found"
  case $WM in
    'PekWM') if [ -f $HOME/.pekwm/config ]; then Win_theme=$(awk -F"/" '/Theme/ {gsub(/\"/,""); print $NF}' $HOME/.pekwm/config); fi;;
    'OpenBox') if [ -f $HOME/.config/openbox/rc.xml ]; then Win_theme=$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' $HOME/.config/openbox/rc.xml); elif [ -f $HOME/.config/openbox/lxde-rc.xml ]; then Win_theme=$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' $HOME/.config/openbox/lxde-rc.xml); fi;;
    'FluxBox') if [ -f $HOME/.fluxbox/init ]; then Win_theme=$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.fluxbox/init); fi;;
    'BlackBox') if [ -f $HOME/.blackboxrc ]; then Win_theme=$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.blackboxrc); fi;;
    'Metacity') if [ `gconftool-2 -g /apps/metacity/general/theme` ]; then Win_theme=$(gconftool-2 -g /apps/metacity/general/theme); fi;;
    'Xfwm4') if [ -f $HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml ]; then Win_theme=$(xfconf-query -c xfwm4 -p /general/theme); fi;;
    'IceWM') if [ -f $HOME/.icewm/theme ]; then Win_theme=$(awk -F"[\",/]" '!/#/ {print $2}' $HOME/.icewm/theme); fi;;
    'KWin') if [ -f $HOME/.kde/share/config/kwinrc ]; then Win_theme=$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' $HOME/.config/openbox/rc.xml); fi;;
    'Emerald') if [ -f $HOME/.emerald/theme/theme.ini ]; then Win_theme=$(for a in /usr/share/emerald/themes/* $HOME/.emerald/themes/*; do cmp "$HOME/.emerald/theme/theme.ini" "$a/theme.ini" &>/dev/null && basename "$a"; done); fi;;
    'FVWM') Win_theme="Not Present";;
    'DWM') Win_theme="Not Present";;
    'Awesome') if [ -f $HOME/.config/awesome/rc.lua ]; then Win_theme=$(grep -e '^[^-].*\(theme\|beautiful\).*lua' $HOME/.config/awesome/rc.lua | grep '[a-zA-Z0-9]\+/[a-zA-Z0-9]\+.lua' -o | cut -d'/' -f1); fi;;
    'WindowMaker') Win_theme="Not Present";;
    'Compiz') if $(grep -iA 1 'gtk_theme' $HOME/.gconf/desktop/gnome/interface/%gconf.xml | grep -i 'stringvalue' | awk -F\> '{print $2}' | awk -F\< '{print Hola}'); then Win_theme=$(gconftool-2 -g /apps/metacity/general/theme); fi;;
    'XMonad') Win_theme="Not Present";;
    'Musca') Win_theme="Not Present";;
    'i3') Win_theme="Not Present";;
    'ratpoison') Win_theme="Not Present";;
    'scrotwm') Win_theme="Not Present";;
    'wmfs') Win_theme="Not Present";;
    'wmii') Win_theme="Not Present";;
    'beryl') Win_theme="Not Present";;
    esac
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding window manager theme...found as '$Win_theme'"
}
# WM Theme Detection - END

# awk -F"= " '/theme.name/ {print $2}' /home/kittykatt/.e16/e_config--0.0.cfg

# try for a in /usr/share/emerald/themes/* $HOME/.emerald/themes/*; do cmp "$HOME/.emerald/theme/theme.ini" "$a/theme.ini" &>/dev/null && basename "$a"; done

# GTK Theme\Icon\Font Detection - BEGIN
detectgtk () {
  gtkTheme="Not Found"
  gtkIcons="Not Found"
  gtkFont="Not Found"
  case $DE in
    'KDE')  # Desktop Environment found as "KDE"
          if [ -a $HOME/.kde/share/config/kdeglobals ]; then
            if grep -q "widgetStyle=" $HOME/.kde/share/config/kdeglobals; then
              gtkTheme=$(awk -F"=" '/widgetStyle=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            elif grep -q "colorScheme=" $HOME/.kde/share/config/kdeglobals; then
              gtkTheme=$(awk -F"=" '/colorScheme=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi

            if [[ "$display" =~ "Icons" ]] && grep -q "Theme=" $HOME/.kde/share/config/kdeglobals; then
              gtkIcons=$(awk -F"=" '/Theme=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi

            if [[ "$display" =~ "Font" ]] && grep -q "Font=" $HOME/.kde/share/config/kdeglobals; then
                gtkFont=$(awk -F"=" '/Font=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi
          fi
  ;;
  'GNOME')  # Desktop Environment found as "GNOME"
          if which gconftool-2 >/dev/null 2>&1; then
            gtkTheme=$(gconftool-2 -g /desktop/gnome/interface/gtk_theme)
          fi

          if [[ "$display" =~ "Icons" ]] && which gconftool-2 >/dev/null 2>&1; then
              gtkIcons=$(gconftool-2 -g /desktop/gnome/interface/icon_theme)
          fi

          if [[ "$display" =~ "Font" ]] && which gconftool-2 >/dev/null 2>&1; then
            gtkFont=$(gconftool-2 -g /desktop/gnome/interface/font_name)
          fi
          if [[ "$display" =~ "Background" ]] && which gconftool-2 >/dev/null 2>&1; then
            gtkBackgroundFull=$(gconftool-2 -g /desktop/gnome/background/picture_filename)
	    gtkBackground=$(echo "$gtkBackgroundFull" | awk -F"/" '{print $NF}')
          fi
  ;;
  'XFCE')  # Desktop Environment found as "XFCE"
         if which xfconf-query >/dev/null 2>&1; then
           gtkTheme=$(xfconf-query -c xsettings -p /Net/ThemeName)
         fi

         if [[ "$display" =~ "Icons" ]] && which xfconf-query >/dev/null 2>&1; then
           gtkIcons=$(xfconf-query -c xsettings -p /Net/IconThemeName)
         fi

         if [[ "$display" =~ "Font" ]] && which xfconf-query >/dev/null 2>&1; then
           gtkFont=$(xfconf-query -c xsettings -p /Gtk/FontName)
         fi
  ;;

# /home/me/.config/rox.sourceforge.net/ROX-Session/Settings.xml

  *) # Lightweight or No DE Found
    if [ -f $HOME/.gtkrc-2.0 ]; then
      if grep -q gtk-theme $HOME/.gtkrc-2.0; then 
         gtkTheme=$(awk -F'"' '/gtk-theme/ {print $2}' $HOME/.gtkrc-2.0)
      fi

      if [[ "$display" =~ "Icons" ]] && grep -q icon-theme $HOME/.gtkrc-2.0; then
          gtkIcons=$(awk -F'"' '/icon-theme/ {print $2}' $HOME/.gtkrc-2.0)
      fi

      if [[ "$display" =~ "Font" ]] && grep -q font $HOME/.gtkrc-2.0; then
          gtkFont=$(awk -F'"' '/font/ {print $2}' $HOME/.gtkrc-2.0)
      fi
    # LXDE
    elif [ -f $HOME/.config/lxde/config ]; then
      if grep -q "sNet\/ThemeName" $HOME/.config/lxde/config; then 
         gtkTheme=$(awk -F'=' '/sNet\/ThemeName/ {print $2}' $HOME/.config/lxde/config)
      fi

      if [[ "$display" =~ "Icons" ]] && grep -q IconThemeName $HOME/.config/lxde/config; then
          gtkIcons=$(awk -F'=' '/sNet\/IconThemeName/ {print $2}' $HOME/.config/lxde/config)
      fi

      if [[ "$display" =~ "Font" ]] && grep -q FontName $HOME/.config/lxde/config; then
          gtkFont=$(awk -F'=' '/sGtk\/FontName/ {print $2}' $HOME/.config/lxde/config)
      fi
    fi
    # $HOME/.gtkrc.mine theme detect only
    if [ -f $HOME/.gtkrc.mine ]; then
      if grep -q "^include" $HOME/.gtkrc.mine; then
        gtkTheme=$(grep '^include.*gtkrc' $HOME/.gtkrc.mine | awk -F "/" '{ print $5 }')
      fi
      if grep -q "^gtk-icon-theme-name" $HOME/.gtkrc.mine; then
        gtkIcons=$(grep 'gtk-icon-theme-name' $HOME/.gtkrc.mine | awk -F '"' '{print $2}')
      fi
    fi
    # ROX-Filer icon detect only
    if [ -a $HOME/.config/rox.sourceforge.net/ROX-Filer/Options ]; then
      gtkIcons=$(awk -F'[>,<]' '/icon_theme/ {print $3}' $HOME/.config/rox.sourceforge.net/ROX-Filer/Options)
    fi
    # Background Detection (feh, nitrogen)
    if [[ "$display" =~ "Background" ]]; then
      if [ -a $HOME/.fehbg ]; then
	gtkBackgroundFull=$(awk -F"\'" '/feh --bg-scale/{print $2}' $HOME/.fehbg 2>/dev/null)
        gtkBackground=$(echo "$gtkBackgroundFull" | awk -F"/" '{print $NF}')
      elif [ -a $XDG_CONFIG_HOME/nitrogen/bg-saved.cfg ]; then
        gtkBackground=$(awk -F"/" '/file=/ {print $NF}' $XDG_CONFIG_HOME/nitrogen/bg-saved.cfg)
      fi
    fi
  ;;
  esac
  if [[ "$verbosity" -eq "1" ]]; then
    verboseOut "Finding GTK theme...found as '$gtkTheme'"
    verboseOut "Finding icon theme...found as '$gtkIcons'"
    verboseOut "Finding user font...found as '$gtkFont'"
    [[ $gtkBackground ]] && verboseOut "Finding background...found as '$gtkBackground'"
  fi
}
# GTK Theme\Icon\Font Detection - END

#######################
# End Detection Phase
#######################

takeShot () {
  if [[ -z $screenCommand ]]; then
    if [[ "$hostshot" == "1" ]]; then
      scrot -cd3 "${shotfile}"
      if [ -f "${shotfile}" ]; then
      	[[ "$verbosity" -eq "1" ]] && verboseOut "Screenshot saved at '${shotfile}'"
      	scp -qo ConnectTimeout="${scptimeout}" "${shotfile}" "${serveraddr}:${serverdir}"
      	echo -e "${bold}==>${c0} Your screenshot can be viewed at ${baseurl}/$shotfile"
      else
        verboseOut "ERROR: Problem saving screenshot to ${shotfile}"
      fi
    else
      scrot -cd3 "${shotfile}"
      if [ -f "${shotfile}" ]; then
      	[[ "$verbosity" -eq "1" ]] && verboseOut "Screenshot saved at '${shotfile}'"
      else
        verboseOut "ERROR: Problem saving screenshot to ${shotfile}"
      fi
    fi
  else
    $screenCommand
  fi
}


asciiText () {
# Distro logos and ASCII outputs
case $distro in
  "Arch Linux - Old")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;34m" # Light Blue
    fulloutput=("$c1              __"
"$c1          _=(SDGJT=_                  $myInfo"
"$c1        _GTDJHGGFCVS)                $OS"
"$c1       ,GTDJGGDTDFBGX0               $kernel"
"$c1      JDJDIJHRORVFSBSVL$c2-=+=,_        $uptime"
"$c1     IJFDUFHJNXIXCDXDSV,$c2  \"DEBL      $myShell"
"$c1    [LKDSDJTDU=OUSCSBFLD.$c2   '?ZWX,   $xResolution"
"$c1   ,LMDSDSWH'     \`DCBOSI$c2     DRDS], $DE"
"$c1   SDDFDFH'         !YEWD,$c2   )HDROD  $WM"
"$c1  !KMDOCG            &GSU|$c2\_GFHRGO\' $WM_theme"
"$c1  HKLSGP'$c2           __$c1\TKM0$c2\GHRBV)'  $GTK_theme"
"$c1 JSNRVW'$c2       __+MNAEC$c1\IOI,$c2\BN'     $GTK_icons"
"$c1 HELK['$c2    __,=OFFXCBGHC$c1\FD)         $GTK_font"
"$c1 ?KGHE $c2\_-#DASDFLSV='$c1    'EF         $GTK_bg"
"$c1 'EHTI                    !H"
"$c1  \`0F'                    '!")
  ;;

  "Arch Linux")
    [ -z $c1 ] && c1="\e[1;36m" # Light
    c2="\e[0;36m" # Dark
    fulloutput=("${c1}                   -\`"
"${c1}                  .o+\`"
"${c1}                 \`ooo/"
"${c1}                \`+oooo:               $myInfo"
"${c1}               \`+oooooo:             $OS"
"${c1}               -+oooooo+:            $kernel"
"${c1}             \`/:-:++oooo+:           $uptime"
"${c1}            \`/++++/+++++++:          $myShell"
"${c1}           \`/++++++++++++++:         $xResolution"
"${c1}          \`/+++o"${c2}"oooooooo"${c1}"oooo/\`       $DE"
"${c2}         "${c1}"./"${c2}"ooosssso++osssssso"${c1}"+\`      $WM"
"${c2}        .oossssso-\`\`\`\`/ossssss+\`     $WM_theme"
"${c2}       -osssssso.      :ssssssso.    $GTK_theme"
"${c2}      :osssssss/        osssso+++.   $GTK_icons"
"${c2}     /ossssssss/        +ssssooo/-   $GTK_font"
"${c2}   \`/ossssso+/:-        -:/+osssso+- $GTK_bg"
"${c2}  \`+sso+:-\`                 \`.-/+oso:"
"${c2} \`++:.                           \`-/+/"
"${c2} .\`                                 \`/")
  ;;

  "Linux Mint")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;32m" # Bold Green
    fulloutput=("$c2 MMMMMMMMMMMMMMMMMMMMMMMMMmds+."
"$c2 MMm----::-://////////////oymNMd+\`       $myInfo"
"$c2 MMd      "$c1"/++                "$c2"-sNMd:   $OS"
"$c2 MMNso/\`  "$c1"dMM    \`.::-. .-::.\` "$c2".hMN:  $kernel"
"$c2 ddddMMh  "$c1"dMM   :hNMNMNhNMNMNh: "$c2"\`NMm  $uptime"
"$c2     NMm  "$c1"dMM  .NMN/-+MMM+-/NMN\` "$c2"dMM  $myShell"
"$c2     NMm  "$c1"dMM  -MMm  \`MMM   dMM. "$c2"dMM  $xResolution"
"$c2     NMm  "$c1"dMM  -MMm  \`MMM   dMM. "$c2"dMM  $DE"
"$c2     NMm  "$c1"dMM  .mmd  \`mmm   yMM. "$c2"dMM  $WM"
"$c2     NMm  "$c1"dMM\`  ..\`   ...   ydm. "$c2"dMM  $WM_theme"
"$c2     hMM- "$c1"+MMd/-------...-:sdds  "$c2"dMM  $GTK_theme"
"$c2     -NMm- "$c1":hNMNNNmdddddddddy/\`  "$c2"dMM  $GTK_icons"
"$c2      -dMNs-"$c1"\`\`-::::-------.\`\`    "$c2"dMM  $GTK_font"
"$c2       \`/dMNmy+/:-------------:/yMMM  $GTK_bg"
"$c2          ./ydNMMMMMMMMMMMMMMMMMMMMM")
  ;;

  "Ubuntu")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;31m" # Light Red
    c3="\e[1;33m" # Bold Yellow
    fulloutput=("$c2                          ./+o+-"
"$c1                  yyyyy- $c2-yyyyyy+"
"$c1               $c1://+//////$c2-yyyyyyo      $myInfo"
"$c3           .++ $c1.:/++++++/-$c2.+sss/\`     $OS"
"$c3         .:++o:  $c1/++++++++/:--:/-     $kernel"
"$c3        o:+o+:++.$c1\`..\`\`\`.-/oo+++++/    $uptime"
"$c3       .:+o:+o/.$c1          \`+sssoo+/   $myShell"
"$c1  .++/+:$c3+oo+o:\`$c1             /sssooo.  $xResolution"
"$c1 /+++//+:$c3\`oo+o$c1               /::--:.  $DE"
"$c1 \+/+o+++$c3\`o++o$c2               ++////.  $WM"
"$c1  .++.o+$c3++oo+:\`$c2             /dddhhh.  $WM_theme"
"$c3       .+.o+oo:.$c2          \`oddhhhh+   $GTK_theme"
"$c3        \+.++o+o\`\`-\`\`$c2\`\`.:ohdhhhhh+    $GTK_icons"
"$c3         \`:o+++ $c2\`ohhhhhhhhyo++os:     $GTK_font"
"$c3           .o:$c2\`.syhhhhhhh/$c3.oo++o\`     $GTK_bg"
"$c2               /osyyyyyyo$c3++ooo+++/"
"$c2                   \`\`\`\`\` $c3+oo+++o\:"
"$c3                          \`oo++.")
  ;;

  "Debian")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;31m" # Light Red
    fulloutput=("  $c1       _,met\$\$\$\$\$gg."
"  $c1    ,g\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$P."
"  $c1  ,g\$\$P\"\"       \"\"\"Y\$\$.\".       $myInfo"
"  $c1 ,\$\$P'              \`\$\$\$.      $OS"
"  $c1',\$\$P       ,ggs.     \`\$\$b:    $kernel"
"  $c1\`d\$\$'     ,\$P\"\'   $c2.$c1    \$\$\$    $uptime"
"  $c1 \$\$P      d\$\'     $c2,$c1    \$\$P    $myShell"
"  $c1 \$\$:      \$\$.   $c2-$c1    ,d\$\$'     $xResolution"
"  $c1 \$\$\;      Y\$b._   _,d\$P'      $DE"
"  $c1 Y\$\$.    $c2\`.$c1\`\"Y\$\$\$\$P\"'          $WM"
"  $c1 \`\$\$b      $c2\"-.__               $WM_theme"
"  $c1  \`Y\$\$                         $GTK_theme"
"  $c1   \`Y\$\$.                       $GTK_icons"
"  $c1     \`\$\$b.                     $GTK_font"
"  $c1       \`Y\$\$b.                  $GTK_bg"
"  $c1          \`\"Y\$b._"
"  $c1              \`\"\"\"\"")
  ;;

  "Crunchbang"|"Crunchbang Statler")
    [ -z $c1 ] && c1="\e[1;37m" # White
    "\e[1;30m" # Dark Gray
    fulloutput=("$c1                ___       ___      _"
"$c1               /  /      /  /     | |  $myInfo"
"$c1              /  /      /  /      | | $OS"
"$c1             /  /      /  /       | | $kernel"
"$c1     _______/  /______/  /______  | | $uptime"
"$c1    /______   _______   _______/  | | $myShell"
"$c1          /  /      /  /          | | $xResolution"
"$c1         /  /      /  /           | | $DE"
"$c1        /  /      /  /            | | $WM"
"$c1 ______/  /______/  /______       | | $WM_theme"
"$c1/_____   _______   _______/       | | $GTK_theme"
"$c1     /  /      /  /               |_| $GTK_icons"
"$c1    /  /      /  /                 _  $GTK_font"
"$c1   /  /      /  /                 | | $GTK_bg"
"$c1  /__/      /__/                  |_|")
  ;;

  "Gentoo")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;35m" # Light Purple
    fulloutput=("$c2         -/oyddmdhs+:."
"$c2     -o"$c1"dNMMMMMMMMNNmhy+"$c2"-\`"
"$c2   -y"$c1"NMMMMMMMMMMMNNNmmdhy"$c2"+-           $myInfo"
"$c2 \`o"$c1"mMMMMMMMMMMMMNmdmmmmddhhy"$c2"/\`       $OS"
"$c2 om"$c1"MMMMMMMMMMMN"$c2"hhyyyo"$c1"hmdddhhhd"$c2"o\`     $kernel"
"$c2.y"$c1"dMMMMMMMMMMd"$c2"hs++so/s"$c1"mdddhhhhdm"$c2"+\`   $uptime"
"$c2 oy"$c1"hdmNMMMMMMMN"$c2"dyooy"$c1"dmddddhhhhyhN"$c2"d.  $myShell"
"$c2  :o"$c1"yhhdNNMMMMMMMNNNmmdddhhhhhyym"$c2"Mh  $xResolution"
"$c2    .:"$c1"+sydNMMMMMNNNmmmdddhhhhhhmM"$c2"my  $DE"
"$c2       /m"$c1"MMMMMMNNNmmmdddhhhhhmMNh"$c2"s:  $WM"
"$c2    \`o"$c1"NMMMMMMMNNNmmmddddhhdmMNhs"$c2"+\`   $WM_theme"
"$c2  \`s"$c1"NMMMMMMMMNNNmmmdddddmNMmhs"$c2"/.     $GTK_theme"
"$c2 /N"$c1"MMMMMMMMNNNNmmmdddmNMNdso"$c2":\`       $GTK_icons"
"$c2+M"$c1"MMMMMMNNNNNmmmmdmNMNdso"$c2"/-          $GTK_font"
"$c2yM"$c1"MNNNNNNNmmmmmNNMmhs+/"$c2"-\`              $GTK_bg"
"$c2/h"$c1"MMNNNNNNNNMNdhs++/"$c2"-\`"
"$c2\`/"$c1"ohdmmddhys+++/:"$c2".\`"
"$c2  \`-//////:--.")
  ;;

  "Fedora")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;34m" # Light Blue
    fulloutput=("$c2           :/------------://"
"$c2        :------------------://"
"$c2      :-----------"$c1"/shhdhyo/"$c2"-://"
"$c2    /-----------"$c1"omMMMNNNMMMd/"$c2"-:/      $myInfo"
"$c2   :-----------"$c1"sMMMdo:/"$c2"       -:/    $OS"
"$c2  :-----------"$c1":MMMd"$c2"-------    --:/   $kernel"
"$c2  /-----------"$c1":MMMy"$c2"-------    ---/   $uptime"
"$c2 :------    --"$c1"/+MMMh/"$c2"--        ---:  $myShell"
"$c2 :---     "$c1"oNMMMMMMMMMNho"$c2"     -----:  $xResolution"
"$c2 :--      "$c1"+shhhMMMmhhy++"$c2"   ------:   $DE"
"$c2 :-      -----"$c1":MMMy"$c2"--------------/   $WM"
"$c2 :-     ------"$c1"/MMMy"$c2"-------------:    $WM_theme"
"$c2 :-      ----"$c1"/hMMM+"$c2"------------:     $GTK_theme"
"$c2 :--"$c1":dMMNdhhdNMMNo"$c2"-----------:       $GTK_icons"
"$c2 :---"$c1":sdNMMMMNds:"$c2"----------:         $GTK_font"
"$c2 :------"$c1":://:"$c2"-----------://          $GTK_bg"
"$c2 :--------------------://")
  ;;

  "BSD")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;31m" # Light Red
    fulloutput=("$c2              ,        ,"
"$c2             /(        )\`"
"$c2             \ \___   / |"
"$c2             /- "$c1"_$c2  \`-/  '"
"$c2            ($c1/\/ \ $c2\   /\\       $myInfo"
"$c1            / /   |$c2 \`    \\     $OS"
"$c1            O O   )$c2 /    |     $kernel"
"$c1            \`-^--'\`$c2<     '     $uptime"
"$c2           (_.)  _  )   /      $myShell"
"$c2            \`.___/\`    /       $xResolution"
"$c2              \`-----' /        $DE"
"$c1 <----.     "$c2"__/ __   \\         $WM"
"$c1 <----|===="$c2"O}}}$c1==$c2} \} \/$c1====   $WM_theme"
"$c1 <----'    $c2\`--' \`.__,' \\       $GTK_theme"
"$c2              |        |       $GTK_icons"
"$c2               \       /       /\\ $GTK_font"
"$c2          ______( (_  / \______/  $GTK_bg"
"$c2        ,'  ,-----'   |"
"$c2        \`--{__________)")
  ;;

  "Mandriva"|"Mandrake")
    c1="\e[1;34m" # Light Blue
    c2="\e[1;33m" # Bold Yellow
    fulloutput=("$c2                         \`\`"
"$c2                        \`-.                 $myInfo"
"$c1       \`               $c2.---                $OS"
"$c1     -/               $c2-::--\`               $kernel"
"$c1   \`++    $c2\`----...\`\`\`-:::::.               $uptime"
"$c1  \`os.      $c2.::::::::::::::-\`\`\`     \`  \`   $myShell"
"$c1  +s+         $c2.::::::::::::::::---...--\`   $xResolution"
"$c1 -ss:          $c2\`-::::::::::::::::-.\`\`.\`\`   $DE"
"$c1 /ss-           $c2.::::::::::::-.\`\`   \`      $WM"
"$c1 +ss:          $c2.::::::::::::-              $WM_theme"
"$c1 /sso         $c2.::::::-::::::-              $GTK_theme"
"$c1 .sss/       $c2-:::-.\`   .:::::              $GTK_icons"
"$c1  /sss+.    $c2..\`$c1  \`--\`    $c2.:::              $GTK_font"
"$c1   -ossso+/:://+/-\`        $c2.:\`             $GTK_bg"
"$c1     -/+ooo+/-.              $c2\`")
  ;;

  "Red Hat Linux")
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;31m" # Light Red
    fulloutput=("$c2              \`.-..........\`"
"$c2             \`////////::.\`-/."
"$c2             -: ....-////////.               $myInfo"
"$c2             //:-::///////////\`             $OS"
"$c2      \`--::: \`-://////////////:             $kernel"
"$c2      //////-    \`\`.-:///////// .\`          $uptime"
"$c2      \`://////:-.\`    :///////::///:\`       $myShell"
"$c2        .-/////////:---/////////////:       $xResolution"
"$c2           .-://////////////////////.       $DE"
"$c1          yMN+\`.-$c2::///////////////-\`        $WM"
"$c1       .-\`:NMMNMs\`  \`..-------..\`           $WM_theme"
"$c1        MN+/mMMMMMhoooyysshsss              $GTK_theme"
"$c1 MMM    MMMMMMMMMMMMMMyyddMMM+              $GTK_icons"
"$c1  MMMM   MMMMMMMMMMMMMNdyNMMh\`     hyhMMM   $GTK_font"
"$c1   MMMMMMMMMMMMMMMMyoNNNMMM+.   MMMMMMMM    $GTK_bg"
"$c1    MMNMMMNNMMMMMNM+ mhsMNyyyyMNMMMMsMM")
  ;;

  *)
    [ -z $c1 ] && c1="\e[1;37m" # White
    c2="\e[1;30m" # Light Gray
    c3="\e[1;33m" # Light Yellow
    fulloutput=("                             $myInfo"
"$c2         #####$c0              $OS"
"$c2        #######             $kernel"
"$c2        ##"$c1"O$c2#"$c1"O$c2##             $uptime"
"$c2        #$c3#####$c2#             $myShell"
"$c2      ##$c1##$c3###$c1##$c2##           $xResolution"
"$c2     #$c1##########$c2##          $DE"
"$c2    #$c1############$c2##         $WM"
"$c2    #$c1############$c2###        $WM_theme"
"$c3   ##$c2#$c1###########$c2##$c3#        $GTK_theme"
"$c3 ######$c2#$c1#######$c2#$c3######      $GTK_icons"
"$c3 #######$c2#$c1#####$c2#$c3#######      $GTK_font"
"$c3   #####$c2#######$c3#####        $GTK_bg"
"$c0")
  ;;
esac

# Truncate lines based on terminal width.
if [ "$truncateSet" == "Yes" ]; then
	n=${#fulloutput[*]}
	for ((i=0;i<n;i++)); do
		targetPercent=100
		termWidth=$(tput cols)
		# stringReal=$(echo "${fulloutput[i]}" | sed -e 's/\x1b\[[0-9];[0-9]*m\?//g')
		stringReal=$(echo "${fulloutput[i]}" | sed -e 's/\\e\[[0-9];[0-9]*m//g' -e 's/\\e\[[0-9]*m//g')
		stringLength=${#stringReal}
		targetLength="$((termWidth*targetPercent/100))"
		if [ "$stringLength" -le "$targetLength" ]; then
			echo -e "${fulloutput[i]}"$c0
		elif [ "$stringLength" -gt "$targetLength" ]; then
		 	echo "${fulloutput[i]:0:$targetLength}..."$c0
		fi
		# Debugging widths
		# echo "Term Width: $termWidth"
		# echo "String Length: $stringLength"
	done
else
	n=${#fulloutput[*]}
	for ((i=0;i<n;i++)); do
		echo -e "${fulloutput[i]}"$c0
	done
fi
# Done with ASCII output
}

infoDisplay () {
  if [ -z "$textcolor" ]; then textcolor="\e[0m"; fi
  if [ -z "$labelcolor" ]; then
    case $distro in
      "Arch Linux - Old"|"Fedora"|"Mandriva"|"Mandrake") labelcolor="\e[1;34m";;
      "Arch Linux") labelcolor="\e[1;36m";;
      "Linux Mint") labelcolor="\e[1;32m";;
      "Ubuntu"|"Debian"|"BSD"|"Red Hat Linux") labelcolor="\e[1;31m";;
      "Crunchbang"|"Crunchbang Statler") labelcolor="\e[1;30m";;
      "Gentoo") labelcolor="\e[1;35m";;
      *) labelcolor="\e[1;33m";;
    esac
  fi
  # Some verbosity stuff
  [[ "$verbosity" == "1" ]] && [[ "$screenshot" == "1" ]] && verboseOut "Screenshot will be taken after info is displayed."
  [[ "$verbosity" == "1" ]] && [[ "$hostshot" == "1" ]] && verboseOut "Screenshot will be transferred/uploaded to specified location."
  # Info Variable Setting
  sysArch=`uname -m`
  myInfo="${labelcolor}${myUser}$textcolor$bold@${labelcolor}${myHost}"
  OS="$labelcolor OS:$textcolor $distro $sysArch"
  kernel="$labelcolor Kernel:$textcolor $kernel"
  uptime="$labelcolor Uptime:$textcolor $uptime"
  myShell="$labelcolor Shell:$textcolor $myShell"
  xResolution="$labelcolor Resolution:${textcolor}${xResolution}"
  DE="$labelcolor DE:$textcolor $DE"
  WM="$labelcolor WM:$textcolor $WM"
  WM_theme="$labelcolor WM Theme:$textcolor $Win_theme"
  GTK_theme="$labelcolor GTK Theme:$textcolor $gtkTheme"
  GTK_icons="$labelcolor Icon Theme:$textcolor $gtkIcons"
  GTK_font="$labelcolor Font:$textcolor $gtkFont"
  if [ "$gtkBackground" ]; then
    GTK_bg="$labelcolor BG:$textcolor $gtkBackground"
  fi
  if [[ "$display" =~ "ASCII" ]]; then
    asciiText
  else
    echo -e "$OS" 
    echo -e "$kernel"
    echo -e "$uptime"
    echo -e "$myShell"
    echo -e "$xResolution"
    echo -e "$DE"
    echo -e "$WM"
    echo -e "$WM_theme"
    echo -e "$GTK_theme"
    echo -e "$GTK_icons"
    echo -e "$GTK_font"
  fi
}

########
# Theme Exporting (Experimental!)
########
themeExport () {
  WM=$(echo "$WM" | awk '{print $NF}')
  if [[ ! -d /tmp/screenfetch-export ]]; then mkdir -p "/tmp/screenfetch-export/Icons" & mkdir -p "/tmp/screenfetch-export/GTK-Theme" & mkdir -p "/tmp/screenfetch-export/WM-${WM}" ; fi
  if [[ "$WM" ]]; then
    if [[ "$WM" =~ "Openbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Fluxbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.fluxbox/styles/$Win_theme" ]]; then
          cp -r "$HOME/.fluxbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Blackbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.blackbox/styles/$Win_theme" ]]; then
          cp -r "$HOME/.blackbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/blackbox/styles/$Win_theme" ]]; then
          cp -r "/usr/share/blackbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "PekWM" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.pekwm/themes/$Win_theme" ]]; then
          cp -r "$HOME/.pekwm/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Metacity" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/themes/$Win_theme" ]]; then
          cp -r "/usr/share/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Xfwm4" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        WM_theme=$(echo "$Win_theme" | awk '{print $NF}')
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/themes/$Win_theme" ]]; then
          cp -r "/usr/share/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    fi
  fi
  if [[ "$gtkBackgroundFull" ]]; then
    cp "$gtkBackgroundFull" /tmp/screenfetch-export/
    [[ "$verbosity" -eq "1" ]] && verboseOut "Found BG file. Transferring to /tmp/screenfetch-export/..."
  fi
  if [[ "$GTK_theme" ]]; then
    GTK_theme=$(echo "$GTK_theme" | awk '{print $NF}')
    if [ -d "/usr/share/themes/$GTK_theme" ]; then
      cp -r "/usr/share/themes/$GTK_theme" "/tmp/screenfetch-export/GTK/Theme/$GTK_theme" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [[ "$GTK_icons" ]]; then
    GTK_icons=$(echo "$GTK_icons" | awk '{print $NF}')
    if [ -d "/usr/share/icons/$GTK_icons" ]; then
      cp -r "/usr/share/icons/$GTK_icons" "/tmp/screenfetch-export/GTK/Icons/$GTK_icons" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK icons theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
    if [ -d "$HOME/.icons/$GTK_icons" ]; then
      cp -r "$HOME/.icons/$GTK_icons" "/tmp/screenfetch-export/GTK/Icons/$GTK_icons" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK icons theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [[ "$GTK_font" ]]; then
    GTK_font=$(echo "$GTK_font" | awk '{print $NF}')
    if [ -d "/usr/share/fonts/$GTK_font" ]; then
      cp -r "/usr/share/fonts/$GTK_font" "/tmp/screenfetch-export/GTK/$GTK_font" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK font. Transferring to /tmp/screenfetch-export/..."
    elif [ -d "$HOME/.fonts/$GTK_font" ]; then
      cp -r "$HOME/.fonts/$GTK_font" "/tmp/screenfetch-export/GTK/$GTK_font" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK font. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [ "$screenshot" == "1" ]; then
    if [ -f "${shotfile}" ]; then
      cp "${shotfile}" "/tmp/screenfetch-export/"
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found screenshot. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  cd /tmp/screenfetch-export/
  [[ "$verbosity" -eq "1" ]] && verboseOut "Creating screenfetch-export.tar.gz archive in /tmp/screenfetch-export/...."
  tar -czf screenfetch-export.tar.gz ../screenfetch-export &>/dev/null
  mv /tmp/screenfetch-export/screenfetch-export.tar.gz $HOME/
  echo -e "${bold}==>${c0} Archive created in /tmp/ and moved to $HOME. Removing /tmp/screenfetch-export/..."
  rm -rf /tmp/screenfetch-export/
}


##################
# Let's Do This!
##################

[[ "$display" =~ "Host" ]] && detecthost
[[ "$display" =~ "OS" ]] && detectdistro
[[ "$display" =~ "Kernel" ]] && detectkernel
[[ "$display" =~ "Uptime" ]] && detectuptime
[[ "$display" =~ "Shell" ]] && detectshell
[[ "$display" =~ "Resolution" ]] && detectres
[[ "$display" =~ "DE" ]] && detectde
[[ "$display" =~ "WM" ]] && detectwm
[[ "$display" =~ "Win_theme" ]] && detectwmtheme
[[ "$display" =~ "Theme" ]] && detectgtk
infoDisplay
[ "$screenshot" == "1" ] && takeShot
[ "$exportTheme" == "1" ] && themeExport
