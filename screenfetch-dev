#!/bin/bash
#
# screenFetch (v2.3.3)
#
# Script to fetch system and theme settings for screenshots in most mainstream
# Linux distributions.
#
# This script is released under the General Public License (GPL). Though it's open
# source and you are free to do with it as you please, I would appreciate if you would
# send any code modifications/additions upstream to me so that I can include them in
# the official release. Please do not claim this code as your own as I have worked
# very hard on this and am quite proud to call this script my own.
#
# Yes, I do realize some of this is horribly ugly coding. Any ideas/suggestions would be
# appreciated by emailing me or by stopping by http://github.com/KittyKatt/screeFetch . You
# could also drop in on my IRC network, SilverIRC, at irc://kittykatt.silverirc.com:6667/meowz
# to put forth suggestions/ideas. Thank you.
#

scriptVersion="2.3.3"

######################
# Settings for fetcher
######################

# This setting controls what ASCII logo is displayed. Available: Arch Linux (Old and Current Logos), Linux Mint, Ubuntu, Crunchbang, Debian, Gentoo, Mandrake/Mandriva, Slackware, SUSE, Fedora, BSD, and None
# distro="Arch Linux"

# This sets the information to be displayed. Available: distro, Kernel, DE, WM, Win_theme, Theme, Icons, Font, Background, ASCII. To get just the information, and not a text-art logo, you would take "ASCII" out of the below variable.
#display="host distro kernel uptime shell res de wm wmtheme gtk icons font background"
display=( host distro kernel uptime shell res de wm wmtheme gtk )
# Display Type: ASCII or Text
display_type="ASCII"

# Colors to use for the information found. These are set below according to distribution. If you would like to set your OWN color scheme for these, uncomment the lines below and edit them to your heart's content.
# textcolor="\e[0m"
# labelcolor="\e[1;34m"

# WM & DE process names
# Removed WM's: compiz
wmnames="fluxbox openbox blackbox xfwm4 metacity kwin icewm pekwm fvwm dwm awesome WindowMaker stumpwm xmonad musca i3 ratpoison scrotwm wmfs wmii beryl subtle e16 enlightenment sawfish emerald"
denames="gnome-session xfce-mcs-manage xfce4-session xfconfd ksmserver lxsession gnome-settings-daemon"

# Export theme settings
# screenFetch has the capability (on some WM's and GTK) to export your GTK and WM settings to an archive. Specify Yes if you want this and No if you do not.
exportTheme=

# Screenshot Settings
# This setting lets the script know if you want to take a screenshot or not. 1=Yes 0=No
screenshot=
# You can specify a custom screenshot command here. Just uncomment and edit. Otherwise, we'll be using the default command: scrot -cd3.
# screenCommand="scrot -cd5"
hostshot=
baseurl="http://www.example.com"
serveraddr="www.example.com"
scptimeout="20"
serverdir="/path/to/directory"
shotfile=$(echo "screenFetch-`date +'%Y-%m-%d_%H-%M-%S'`.png")

# Verbose Setting - Set to 1 for verbose output.
verbosity=

verboseOut () {
	echo -e "\e[1;31m:: \e[0m$1"
}

errorOut () {
	echo -e "\e[1;37m[[ \e[1;31m! \e[1;37m]] \e[0m$1"
}

colorize () {
	echo -ne "\033[38;5;$1m"
}

#############################################
#### CODE No need to edit past here CODE ####
#############################################

####################
# Static Variables
####################
c0="\e[0m" # Reset Text
bold="\e[1m" # Bold Text
underline="\e[4m" # Underline Text
display_index=0


######################
# Color Declarations
######################
sf_white=$(colorize "254")
sf_black=$(colorize "233")
sf_lred=$(colorize "167")
sf_red=$(colorize "124")
sf_dred=$(colorize "88")
sf_lgreen=$(colorize "41")
sf_green=$(colorize "34")
sf_dgreen=$(colorize "22")
sf_yellow=$(colorize "220")
sf_lblue=$(colorize "33")
sf_blue=$(colorize "27")
sf_dblue=$(colorize "21")
sf_lpurple=$(colorize "99")
sf_purple=$(colorize "57")
sf_dpurple=$(colorize "54")
sf_cyan=$(colorize "45")
sf_orange=$(colorize "202")
sf_brown=$(colorize "94")
sf_dgrey=$(colorize "237")
sf_grey=$(colorize "237")
sf_lgrey=$(colorize "245")


#####################
# Begin Flags Phase
#####################

while getopts ":hsmevVntlc:D:o:B" flags; do
  case $flags in
    h)
      echo -e "${underline}Usage${c0}:"
      echo -e "  screenFetch [OPTIONAL FLAGS]"
      echo ""
      echo "screenFetch - a CLI Bash script to show system/theme info in screenshots."
      echo ""
      echo -e "${underline}Supported Distributions${c0}:      Arch Linux (Old and Current Logos), Linux Mint,"
      echo -e "			      Ubuntu, Crunchbang, Debian, Gentoo, Fedora,"
      echo -e "			      Mandrake/Mandriva, Slackware, SUSE, and BSD"
      echo -e "${underline}Supported Desktop Managers${c0}:   KDE, GNOME, XFCE, and LXDE, and Not Present"
      echo -e "${underline}Supported Window Managers${c0}:    PekWM, OpenBox, FluxBox, BlackBox, Xfwm4,"
      echo -e "			      Metacity, StumpWM, KWin, IceWM, FVWM,"
      echo -e "			      DWM, Awesome, XMonad, Musca, i3, WindowMaker,"
      echo -e "			      Ratpoison, wmii, WMFS, ScrotWM, subtle,"
      echo -e "			      Emerald, E17 and Beryl."
      echo ""
      echo -e "${underline}Options${c0}:"
      echo -e "   ${bold}-v${c0}                 Verbose output."
      echo -e "   ${bold}-o 'OPTIONS'${c0}       Allows for setting script variables on the"
      echo -e "		      command line. Must be in the following format..."
      echo -e "		      'OPTION1=\"OPTIONARG1\";OPTION2=\"OPTIONARG2\"'"
      #echo -e "   ${bold}-d 'ARGUMENTS'${c0}     Allows for setting what information is displayed"
      #echo -e "		      on the command line. Format must be as follows:"
      #echo -e "		      'OPTION OPTION OPTION OPTION'. Valid options are"
      #echo -e "		      host, distro, Kernel, Uptime, Shell, Resolution, DE, WM,"
      #echo -e "		      Win_theme, Theme, Icons, Font, ASCII, Background."
      echo -e "   ${bold}-n${c0}                 Do no display ASCII distribution logo."
      echo -e "   ${bold}-t${c0}                 Truncate output based on terminal width (Experimental!)."
      echo -e "   ${bold}-s(m)${c0}              Using this flag tells the script that you want it"
      echo -e "		      to take a screenshot. Use the -m flag if you would like"
      echo -e "		      to move it to a new location afterwards."
      echo -e "	  ${bold}-B${c0}		 Enable background detection."
      echo -e "   ${bold}-e${c0}                 When this flag is specified, screenFetch will attempt"
      echo -e "		      to export all of your theme settings and archive them"
      echo -e "		      up for uploading."
      echo -e "   ${bold}-l${c0}                 Specify that you have a light background. This turns"
      echo -e "		      all white text into dark gray text (in ascii logos and"
      echo -e "		      in information output)."
      echo -e "   ${bold}-c 'COMMAND'${c0}       Here you can specify a custom screenshot command for"
      echo -e "		      the script to execute. Surrounding quotes are required."
      echo -e "   ${bold}-D 'DISTRO'${c0}        Here you can specify your distribution for the script"
      echo -e "		      to use. Surrounding quotes are required."
      echo -e "   ${bold}-V${c0}                 Display current script version."
      echo -e "   ${bold}-h${c0}                 Display this help."
      exit
    ;;
    s) screenshot=1; continue;;
    m) hostshot=1; continue;;
    e) exportTheme=1; continue;;
    v) verbosity=1; continue;;
    V)
      echo -e $underline"screenFetch"$c0" - Version $scriptVersion"
      echo "Copyright (C) Brett Bohnenkamper (kittykatt@silverirc.com)"
      echo ""
      echo "This is free software; see the source for copying conditions.  There is NO
warranty; not even MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
      exit
    ;;
    D) distro=$OPTARG; continue;;
    t) truncateSet="Yes";;
    c) screenCommand=$OPTARG; continue;;
    n) display_type="Text";;
    o) overrideOpts=$OPTARG; continue;;
    # d) overrideDisplay=$OPTARG; continue;;
    l) c1="\e[1;30m";;
    B) background_detect="1"; continue;;
    :) errorOut "Error: You're missing an argument somewhere. Exiting."; exit;;
    ?) errorOut "Error: Invalid flag somewhere. Exiting."; exit;;
    *) errorOut "Error"; exit;;
  esac
 done

###################
# End Flags Phase
###################


####################
# Override Options
####################

if [[ "$overrideOpts" ]]; then
  [[ "$verbosity" -eq "1" ]] && verboseOut "Found 'o' flag in syntax. Overriding some script variables..."
  OLD_IFS="$IFS"
  IFS=";"
  for overopt in "$overrideOpts"; do
    eval "$overrideOpts"
  done
  IFS="$OLD_IFS"
fi
#if [[ "$overrideDisplay" ]]; then
#  [[ "$verbosity" -eq "1" ]] && verboseOut "Found 'd' flag in syntax. Overriding some display options..."
#  display="$overrideDisplay"
#fi


#########################
# Begin Detection Phase
#########################
    

# Host and User detection - Begin
detecthost () {
  myUser=$(echo "$USER")
  myHost=$(hostname)
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding hostname and user...found as '$myUser@$myHost'"
}

# Distro Detection - Begin
detectdistro () {
  if [[ -z $distro ]]; then
    distro="Unknown"
    if which lsb_release >/dev/null 2>&1; then
      distro_detect=$(lsb_release -i | sed -e 's/Distributor ID://' -e 's/\t//g')
      if [ "$distro_detect" == "Arch" ]; then distro="Arch Linux"; fi
      if [ "$distro_detect" == "Debian" ]; then distro="Debian"; fi
      if [ "$distro_detect" == "LinuxMint" ]; then distro="Mint"
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "debian" ]; then
          distro="LMDE"
          distro_codename=null
          distro_release=null
        fi
      fi
      if [ "$distro_detect" == "MandrivaLinux" ]; then distro="Mandriva"
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "turtle" ]; then
          distro="Mandriva"-lsb_release | sed -e 's/Release://' -e 's/\t//g'
          distro_codename=null
        fi
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "Henry_Farman" ]; then
          distro="Mandriva"-lsb_release | sed -e 's/Release://' -e 's/\t//g'
          distro_codename=null
        fi
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "Farman" ]; then
          distro="Mandriva"-lsb_release | sed -e 's/Release://' -e 's/\t//g'
          distro_codename=null
        fi
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "Adelie" ]; then
          distro="Mandriva"-lsb_release | sed -e 's/Release://' -e 's/\t//g'
          distro_codename=null
        fi
        if [ "$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g')" == "pauillac" ]; then
          distro="Mandriva"-lsb_release | sed -e 's/Release://' -e 's/\t//g'
          distro_codename=null
        fi
      fi
      if [ "$distro_detect" == "Fedora" ]; then distro="Fedora"; fi
      if [ "$distro_detect" == "CrunchBang" ]; then distro="CrunchBang"; fi
      if [ "$distro_detect" == "Ubuntu" ]; then distro="Ubuntu"; fi
      if [[ $(lsb_release -r | sed -e 's/Release://' -e 's/\t//g') != "n/a" ]] && [[ ! $distro_release ]]; then distro_release=$(lsb_release -r | sed -e 's/Release://' -e 's/\t//g') && distro_more="$distro $distro_release"; fi
      if [[ $(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g') != "n/a" ]] && [[ ! $distro_codename ]]; then distro_codename=$(lsb_release -c | sed -e 's/Codename://' -e 's/\t//g') && distro_more="$distro $distro_codename"; fi
    else
      if [ -f /etc/debian_version ]; then distro="Debian"; fi
      if grep -i ubuntu /etc/lsb-release >/dev/null 2>&1; then distro="Ubuntu"; fi
      if grep -i mint /etc/lsb-release >/dev/null 2>&1; then
        if grep -i debian /etc/lsb-release >/dev/null 2>&1; then distro="LMDE"
        else distro="Mint"; fi
      fi
      if [ -f /etc/arch-release ]; then distro="Arch Linux"; fi
      if [ -f /etc/fedora-release ]; then distro="Fedora"; fi
      if [ -f /etc/redhat-release ]; then distro="Red Hat Linux"; fi
      if [ -f /etc/slackware-version ]; then distro="Slackware"; fi
      if [ -f /etc/SuSE-release ]; then distro="OpenSuSe"; fi
      if [ -f /etc/mandrake-release ]; then distro="Mandrake"; fi
      if [ -f /etc/mandriva-release ]; then distro="Mandriva"; fi
      if [ -f /etc/crunchbang-lsb-release ]; then distro="CrunchBang"; fi
      if [ -f /etc/gentoo-release ]; then distro="Gentoo"; fi
      if [ -f /var/run/dmesg.boot ] && grep -i bsd /var/run/dmesg.boot; then distro="BSD"; fi
      if [ -f /usr/share/doc/tc/release.txt ]; then distro="TinyCore"; fi
    fi
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding distro...found as '$distro $distro_release'"
}
# Distro Detection - End

# Find Number of Running Processes
# processnum="$(( $( ps aux | wc -l ) - 1 ))"

# Kernel Version Detection - Begin
detectkernel () {
  kernel=`uname -r`
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding kernel version...found as '$kernel'"
}
# Kernel Version Detection - End


# Uptime Detection - Begin
detectuptime () {
  uptime=`awk -F. '{print $1}' /proc/uptime`
  secs=$((${uptime}%60))
  mins=$((${uptime}/60%60))
  hours=$((${uptime}/3600%24))
  days=$((${uptime}/86400))
  uptime="${mins}m"
  if [ "${hours}" -ne "0" ]; then
    uptime="${hours}h ${uptime}"
  fi
  if [ "${days}" -ne "0" ]; then
    uptime="${days}d ${uptime}"
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current uptime...found as '$uptime'"
}
# Uptime Detection - End


# Shell Detection - Begin
detectshell () {
  myShell=$(echo $SHELL | awk -F"/" '{print $NF}')
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current shell...found as '$myShell'"
}
# Shell Detection - End


# Resolution Detection - Begin
detectres () {
  if [[ -n $DISPLAY ]]; then
    xResolution=$(xdpyinfo | sed -n 's/.*dim.* \([0-9]*x[0-9]*\) .*/\1/pg' | sed ':a;N;$!ba;s/\n/ /g')
  else
    xResolution="No X Server"
  fi
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding current resolution(s)...found as '$xResolution'"
}
# Resolution Detection - End


# DE Detection - Begin
detectde () {
  DE="Not Present"
    for each in $denames; do
      if [[ `ps aux` =~ "$each" ]]; then
        [ "$each" == "gnome-session" -o "$each" == "gnome-settings-daemon" ] && DE="GNOME" && DEver=$(gnome-session --version | awk {'print $NF'})
        [ "$each" == "xfce4-session" ] && DE="XFCE" && DEver=$(xfce4-settings-manager --version | grep -m 1 "" | awk {'print $2'})
        [ "$each" == "ksmserver" ] && DE="KDE" && DEver=$(kwin --version | awk '/^Qt/ {data="Qt v" $2};/^KDE/ {data=$2 " (" data ")"};END{print data}')
        [ "$each" == "lxsession" ] && DE="LXDE"
      fi
    done
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding desktop environment...found as '$DE'"
}
### DE Detection - End


# WM Detection - Begin
detectwm () {
  WM="Not Found"
  userId="$(id -u ${USER})"
  for each in $wmnames; do
    PID="$(pgrep -U ${userId} $each)"
    if [ "$PID" ]; then
      case $each in
        'fluxbox') WM="FluxBox";;
        'openbox') WM="OpenBox";;
        'blackbox') WM="Blackbox";;
        'xfwm4') WM="Xfwm4";;
        'metacity') WM="Metacity";;
        'kwin') WM="KWin";;
        'icewm') WM="IceWM";;
        'pekwm') WM="PekWM";;
        'fvwm') WM="FVWM";;
        'dwm') WM="DWM";;
        'awesome') WM="Awesome";;
        'WindowMaker') WM="WindowMaker";;
	'stumpwm') WM="StumpWM";;
	'xmonad') WM="XMonad";;
	'musca') WM="Musca";;
	'i3') WM="i3";;
	'ratpoison') WM="Ratpoison";;
	'scrotwm') WM="ScrotWM";;
	'wmfs') WM="WMFS";;
	'wmii') WM="wmii";;
	'subtle') WM="subtle";;
	'e16') WM="E16";;
	'enlightenment') WM="E17";;
	'emerald') WM="Emerald";;
        'sawfish') WM="Sawfish";;
	'beryl') WM="Beryl";;
      esac
    fi
  done
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding window manager...found as '$WM'"
}
# WM Detection - End


# WM Theme Detection - BEGIN
detectwmtheme () {
  Win_theme="Not Found"
  case $WM in
    'PekWM') if [ -f $HOME/.pekwm/config ]; then Win_theme="$(awk -F"/" '/Theme/ {gsub(/\"/,""); print $NF}' $HOME/.pekwm/config)"; fi;;
    'OpenBox') if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml ]; then Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml)"; elif [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml ]; then Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml)"; fi;;
    'FluxBox') if [ -f $HOME/.fluxbox/init ]; then Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.fluxbox/init)"; fi;;
    'BlackBox') if [ -f $HOME/.blackboxrc ]; then Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.blackboxrc)"; fi;;
    'Metacity') if [ "`gconftool-2 -g /apps/metacity/general/theme`" ]; then Win_theme="$(gconftool-2 -g /apps/metacity/general/theme)"; fi ;;
    'Xfwm4') if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml ]; then Win_theme="$(xfconf-query -c xfwm4 -p /general/theme)"; fi;;
    'IceWM') if [ -f $HOME/.icewm/theme ]; then Win_theme="$(awk -F"[\",/]" '!/#/ {print $2}' $HOME/.icewm/theme)"; fi;;
    'KWin') if [ -f $HOME/.kde/share/config/plasmarc ]; then Win_theme="$(awk -F"=" '/^name=/ { getline; print $2 }' ${HOME}/.kde/share/config/plasmarc)"; else Win_theme="Not Present"; fi;;
    'Emerald') if [ -f $HOME/.emerald/theme/theme.ini ]; then Win_theme="$(for a in /usr/share/emerald/themes/* $HOME/.emerald/themes/*; do cmp "$HOME/.emerald/theme/theme.ini" "$a/theme.ini" &>/dev/null && basename "$a"; done)"; fi;;
    'FVWM') Win_theme="Not Present";;
    'DWM') Win_theme="Not Present";;
    'Awesome') if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/awesome/rc.lua ]; then Win_theme="$(grep -e '^[^-].*\(theme\|beautiful\).*lua' ${XDG_CONFIG_HOME:-${HOME}/.config}/awesome/rc.lua | grep '[a-zA-Z0-9]\+/[a-zA-Z0-9]\+.lua' -o | cut -d'/' -f1)"; fi;;
    'WindowMaker') Win_theme="Not Present";;
    'XMonad') Win_theme="Not Present";;
    'Musca') Win_theme="Not Present";;
    'i3') Win_theme="Not Present";;
    'Ratpoison') Win_theme="Not Present";;
    'ScrotWM') Win_theme="Not Present";;
    'WMFS') Win_theme="Not Present";;
    'wmii') Win_theme="Not Present";;
    'subtle') Win_theme="Not Present";;
    'E16') Win_theme="$(awk -F"= " '/theme.name/ {print $2}' $HOME/.e16/e_config--0.0.cfg)";;
    #E17 doesn't store cfg files in text format so for now get the profile as opposed to theme. atyoung
    #TODO: Find a way to extract and read E17 .cfg files ( google seems to have nothing ). atyoung
    'E17') Win_theme=${E_CONF_PROFILE};;
    'Sawfish') Win_theme="$(awk -F")" '/\(custom-set-typed-variable/{print $2}' $HOME/.sawfish/custom | sed 's/ (quote //')";;
    'Beryl') Win_theme="Not Present";;
    esac
  [[ "$verbosity" -eq "1" ]] && verboseOut "Finding window manager theme...found as '$Win_theme'"
}
# WM Theme Detection - END

# GTK Theme\Icon\Font Detection - BEGIN
detectgtk () {
  gtkTheme="Not Found"
  gtkIcons="Not Found"
  gtkFont="Not Found"
  case $DE in
    'KDE')  # Desktop Environment found as "KDE"
          if [ -a $HOME/.kde/share/config/kdeglobals ]; then
            if grep -q "widgetStyle=" $HOME/.kde/share/config/kdeglobals; then
              gtkTheme=$(awk -F"=" '/widgetStyle=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            elif grep -q "colorScheme=" $HOME/.kde/share/config/kdeglobals; then
              gtkTheme=$(awk -F"=" '/colorScheme=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi

            if grep -q "Theme=" $HOME/.kde/share/config/kdeglobals; then
              gtkIcons=$(awk -F"=" '/Theme=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi

            if grep -q "Font=" $HOME/.kde/share/config/kdeglobals; then
              gtkFont=$(awk -F"=" '/font=/ {print $2}' $HOME/.kde/share/config/kdeglobals)
            fi
          fi
  ;;
  'GNOME')  # Desktop Environment found as "GNOME"
          if which gconftool-2 >/dev/null 2>&1; then
            gtkTheme=$(gconftool-2 -g /desktop/gnome/interface/gtk_theme)
          fi

          if which gconftool-2 >/dev/null 2>&1; then
              gtkIcons=$(gconftool-2 -g /desktop/gnome/interface/icon_theme)
          fi

          if which gconftool-2 >/dev/null 2>&1; then
            gtkFont=$(gconftool-2 -g /desktop/gnome/interface/font_name)
          fi
	  if [ "$background_detect" == "1" ]; then
            if which gconftool-2 >/dev/null 2>&1; then
              gtkBackgroundFull=$(gconftool-2 -g /desktop/gnome/background/picture_filename)
  	      gtkBackground=$(echo "$gtkBackgroundFull" | awk -F"/" '{print $NF}')
            fi
	  fi
  ;;
  'XFCE')  # Desktop Environment found as "XFCE"
         if which xfconf-query >/dev/null 2>&1; then
           gtkTheme=$(xfconf-query -c xsettings -p /Net/ThemeName)
         fi

         if which xfconf-query >/dev/null 2>&1; then
           gtkIcons=$(xfconf-query -c xsettings -p /Net/IconThemeName)
         fi

         if which xfconf-query >/dev/null 2>&1; then
           gtkFont=$(xfconf-query -c xsettings -p /Gtk/FontName)
         fi
  ;;

# /home/me/.config/rox.sourceforge.net/ROX-Session/Settings.xml

  *) # Lightweight or No DE Found
    if [ -f $HOME/.gtkrc-2.0 ]; then
      if grep -q gtk-theme $HOME/.gtkrc-2.0; then 
         gtkTheme=$(awk -F'"' '/gtk-theme/ {print $2}' $HOME/.gtkrc-2.0)
      fi

      if grep -q icon-theme $HOME/.gtkrc-2.0; then
          gtkIcons=$(awk -F'"' '/icon-theme/ {print $2}' $HOME/.gtkrc-2.0)
      fi

      if grep -q font $HOME/.gtkrc-2.0; then
          gtkFont=$(awk -F'"' '/gtk-font-name/ {print $2}' $HOME/.gtkrc-2.0)
      fi
    # LXDE
    elif [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config ]; then
      if grep -q "sNet\/ThemeName" ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config; then 
         gtkTheme=$(awk -F'=' '/sNet\/ThemeName/ {print $2}' ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config)
      fi

      if grep -q IconThemeName ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config; then
          gtkIcons=$(awk -F'=' '/sNet\/IconThemeName/ {print $2}' ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config)
      fi

      if grep -q FontName ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config; then
          gtkFont=$(awk -F'=' '/sGtk\/FontName/ {print $2}' ${XDG_CONFIG_HOME:-${HOME}/.config}/lxde/config)
      fi
    fi
    # $HOME/.gtkrc.mine theme detect only
    if [ -f $HOME/.gtkrc.mine ]; then
      if grep -q "^include" $HOME/.gtkrc.mine; then
        gtkTheme=$(grep '^include.*gtkrc' $HOME/.gtkrc.mine | awk -F "/" '{ print $5 }')
      fi
      if grep -q "^gtk-icon-theme-name" $HOME/.gtkrc.mine; then
        gtkIcons=$(grep 'gtk-icon-theme-name' $HOME/.gtkrc.mine | awk -F '"' '{print $2}')
      fi
    fi
    # ROX-Filer icon detect only
    if [ -a ${XDG_CONFIG_HOME:-${HOME}/.config}/rox.sourceforge.net/ROX-Filer/Options ]; then
      gtkIcons=$(awk -F'[>,<]' '/icon_theme/ {print $3}' ${XDG_CONFIG_HOME:-${HOME}/.config}/rox.sourceforge.net/ROX-Filer/Options)
    fi
    # E17 detection
    if [ $E_ICON_THEME ]; then
      gtkIcons=${E_ICON_THEME}
      gtkTheme="Not available."
      gtkFont="Not available."
    fi
    # Background Detection (feh, nitrogen)
    if [ "$background_detect" == "1" ]; then
      if [ -a $HOME/.fehbg ]; then
        gtkBackgroundFull=$(awk -F"'" '/feh --bg/{print $2}' $HOME/.fehbg 2>/dev/null)
        gtkBackground=$(echo "$gtkBackgroundFull" | awk -F"/" '{print $NF}')
      elif [ -a ${XDG_CONFIG_HOME:-${HOME}/.config}/nitrogen/bg-saved.cfg ]; then
        gtkBackground=$(awk -F"/" '/file=/ {print $NF}' ${XDG_CONFIG_HOME:-${HOME}/.config}/nitrogen/bg-saved.cfg)
      fi
    fi
  ;;
  esac
  if [[ "$verbosity" -eq "1" ]]; then
    verboseOut "Finding GTK theme...found as '$gtkTheme'"
    verboseOut "Finding icon theme...found as '$gtkIcons'"
    verboseOut "Finding user font...found as '$gtkFont'"
    [[ $gtkBackground ]] && verboseOut "Finding background...found as '$gtkBackground'"
  fi
}
# GTK Theme\Icon\Font Detection - END

#######################
# End Detection Phase
#######################

takeShot () {
  if [[ -z $screenCommand ]]; then
    if [[ "$hostshot" == "1" ]]; then
      scrot -cd3 "${shotfile}"
      if [ -f "${shotfile}" ]; then
      	[[ "$verbosity" -eq "1" ]] && verboseOut "Screenshot saved at '${shotfile}'"
      	scp -qo ConnectTimeout="${scptimeout}" "${shotfile}" "${serveraddr}:${serverdir}"
      	echo -e "${bold}==>${c0} Your screenshot can be viewed at ${baseurl}/$shotfile"
      else
        verboseOut "ERROR: Problem saving screenshot to ${shotfile}"
      fi
    else
      scrot -cd3 "${shotfile}"
      if [ -f "${shotfile}" ]; then
      	[[ "$verbosity" -eq "1" ]] && verboseOut "Screenshot saved at '${shotfile}'"
      else
        verboseOut "ERROR: Problem saving screenshot to ${shotfile}"
      fi
    fi
  else
    $screenCommand
  fi
}


asciiText () {
# Distro logos and ASCII outputs
case $distro in

  "Arch Linux - Old")
    startline="1"
    fulloutput=("${bold}${sf_white}              __"
"${bold}${sf_white}          _=(SDGJT=_                  %s"
"${bold}${sf_white}        _GTDJHGGFCVS)                %s"
"${bold}${sf_white}       ,GTDJGGDTDFBGX0               %s"
"${bold}${sf_white}      JDJDIJHRORVFSBSVL"${bold}${sf_blue}"-=+=,_        %s"
"${bold}${sf_white}     IJFDUFHJNXIXCDXDSV,"${bold}${sf_blue}"  \"DEBL      %s"
"${bold}${sf_white}    [LKDSDJTDU=OUSCSBFLD."${bold}${sf_blue}"   '?ZWX,   %s"
"${bold}${sf_white}   ,LMDSDSWH'     \`DCBOSI"${bold}${sf_blue}"     DRDS], %s"
"${bold}${sf_white}   SDDFDFH'         !YEWD,"${bold}${sf_blue}"   )HDROD  %s"
"${bold}${sf_white}  !KMDOCG            &GSU|"${bold}${sf_blue}"\_GFHRGO\'  %s"
"${bold}${sf_white}  HKLSGP'"${bold}${sf_blue}"           __"${bold}${sf_white}"\TKM0"${bold}${sf_blue}"\GHRBV)'  %s"
"${bold}${sf_white} JSNRVW'"${bold}${sf_blue}"       __+MNAEC"${bold}${sf_white}"\IOI,"${bold}${sf_blue}"\BN'     %s"
"${bold}${sf_white} HELK['"${bold}${sf_blue}"    __,=OFFXCBGHC"${bold}${sf_white}"\FD)         %s"
"${bold}${sf_white} ?KGHE "${bold}${sf_blue}"\_-#DASDFLSV='"${bold}${sf_white}"    'EF         %s"
"${bold}${sf_white} 'EHTI                    !H"
"${bold}${sf_white}  \`0F'                    '!")
  ;;

  "Arch Linux")
    startline="3"
    fulloutput=("${bold}${sf_lblue}                   -\`"
"${bold}${sf_lblue}                  .o+\`"
"${bold}${sf_lblue}                 \`ooo/"
"${bold}${sf_lblue}                \`+oooo:               %s"
"${bold}${sf_lblue}               \`+oooooo:             %s"
"${bold}${sf_lblue}               -+oooooo+:            %s"
"${bold}${sf_lblue}             \`/:-:++oooo+:           %s"
"${bold}${sf_lblue}            \`/++++/+++++++:          %s"
"${bold}${sf_lblue}           \`/++++++++++++++:         %s"
"${bold}${sf_lblue}          \`/+++o"${bold}${sf_blue}"oooooooo"${bold}${sf_lblue}"oooo/\`       %s"
"${bold}${sf_blue}         "${bold}${sf_lblue}"./"${bold}${sf_blue}"ooosssso++osssssso"${bold}${sf_lblue}"+\`      %s"
"${bold}${sf_blue}        .oossssso-\`\`\`\`/ossssss+\`     %s"
"${bold}${sf_blue}       -osssssso.      :ssssssso.    %s"
"${bold}${sf_blue}      :osssssss/        osssso+++.   %s"
"${bold}${sf_blue}     /ossssssss/        +ssssooo/-   %s"
"${bold}${sf_blue}   \`/ossssso+/:-        -:/+osssso+- %s"
"${bold}${sf_blue}  \`+sso+:-\`                 \`.-/+oso:"
"${bold}${sf_blue} \`++:.                           \`-/+/"
"${bold}${sf_blue} .\`                                 \`/")
  ;;

  "Mint")
    startline="1"
    fulloutput=("${bold}${sf_lgreen} MMMMMMMMMMMMMMMMMMMMMMMMMmds+."
"${bold}${sf_lgreen} MMm----::-://////////////oymNMd+\`       %s"
"${bold}${sf_lgreen} MMd      "${bold}${sf_white}"/++                "${bold}${sf_lgreen}"-sNMd:   %s"
"${bold}${sf_lgreen} MMNso/\`  "${bold}${sf_white}"dMM    \`.::-. .-::.\` "${bold}${sf_lgreen}".hMN:  %s"
"${bold}${sf_lgreen} ddddMMh  "${bold}${sf_white}"dMM   :hNMNMNhNMNMNh: "${bold}${sf_lgreen}"\`NMm  %s"
"${bold}${sf_lgreen}     NMm  "${bold}${sf_white}"dMM  .NMN/-+MMM+-/NMN\` "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     NMm  "${bold}${sf_white}"dMM  -MMm  \`MMM   dMM. "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     NMm  "${bold}${sf_white}"dMM  -MMm  \`MMM   dMM. "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     NMm  "${bold}${sf_white}"dMM  .mmd  \`mmm   yMM. "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     NMm  "${bold}${sf_white}"dMM\`  ..\`   ...   ydm. "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     hMM- "${bold}${sf_white}"+MMd/-------...-:sdds  "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}     -NMm- "${bold}${sf_white}":hNMNNNmdddddddddy/\`  "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}      -dMNs-"${bold}${sf_white}"\`\`-::::-------.\`\`    "${bold}${sf_lgreen}"dMM  %s"
"${bold}${sf_lgreen}       \`/dMNmy+/:-------------:/yMMM  %s"
"${bold}${sf_lgreen}          ./ydNMMMMMMMMMMMMMMMMMMMMM")
  ;;


  "LMDE")
    startline="2"
    fulloutput=("          "${bold}${sf_white}"\`.-::---.."
"${bold}${sf_lgreen}       .:++++ooooosssoo:."
"${bold}${sf_lgreen}     .+o++::.      \`.:oos+.     %s"
"${bold}${sf_lgreen}    :oo:.\`             -+oo"${bold}${sf_white}":   %s"
"${bold}${sf_lgreen}  "${bold}${sf_white}"\`"${bold}${sf_lgreen}"+o/\`    ."${bold}${sf_white}"::::::"${bold}${sf_lgreen}"-.    .++-"${bold}${sf_white}"\`  %s"
"${bold}${sf_lgreen} "${bold}${sf_white}"\`"${bold}${sf_lgreen}"/s/    .yyyyyyyyyyo:   +o-"${bold}${sf_white}"\`  %s"
"${bold}${sf_lgreen} "${bold}${sf_white}"\`"${bold}${sf_lgreen}"so     .ss       ohyo\` :s-"${bold}${sf_white}":  %s"
"${bold}${sf_lgreen} "${bold}${sf_white}"\`"${bold}${sf_lgreen}"s/     .ss  h  m  myy/ /s\`"${bold}${sf_white}"\`  %s"
"${bold}${sf_lgreen} \`s:     \`oo  s  m  Myy+-o:\`   %s"
"${bold}${sf_lgreen} \`oo      :+sdoohyoydyso/.     %s"
"${bold}${sf_lgreen}  :o.      .:////////++:       %s"
"${bold}${sf_lgreen}  \`/++        "${bold}${sf_white}"-:::::-          %s"
"${bold}${sf_lgreen}   "${bold}${sf_white}"\`"${bold}${sf_lgreen}"++-                        %s"
"${bold}${sf_lgreen}    "${bold}${sf_white}"\`"${bold}${sf_lgreen}"/+-                       %s"
"${bold}${sf_lgreen}      "${bold}${sf_white}"."${bold}${sf_lgreen}"+/.                     %s"
"${bold}${sf_lgreen}        "${bold}${sf_white}"."${bold}${sf_lgreen}":+-."
"${bold}${sf_lgreen}           \`--.\`\`")
  ;;

  "Ubuntu")
    startline="2"
    fulloutput=("${bold}${sf_lred}                          ./+o+-"
"${bold}${sf_white}                  yyyyy- "${bold}${sf_lred}"-yyyyyy+"
"${bold}${sf_white}               "${bold}${sf_white}"://+//////"${bold}${sf_lred}"-yyyyyyo      %s"
"${bold}${sf_yellow}           .++ "${bold}${sf_white}".:/++++++/-"${bold}${sf_lred}".+sss/\`     %s"
"${bold}${sf_yellow}         .:++o:  "${bold}${sf_white}"/++++++++/:--:/-     %s"
"${bold}${sf_yellow}        o:+o+:++."${bold}${sf_white}"\`..\`\`\`.-/oo+++++/    %s"
"${bold}${sf_yellow}       .:+o:+o/."${bold}${sf_white}"          \`+sssoo+/   %s"
"${bold}${sf_white}  .++/+:"${bold}${sf_yellow}"+oo+o:\`"${bold}${sf_white}"             /sssooo.  %s"
"${bold}${sf_white} /+++//+:"${bold}${sf_yellow}"\`oo+o"${bold}${sf_white}"               /::--:.  %s"
"${bold}${sf_white} \+/+o+++"${bold}${sf_yellow}"\`o++o"${bold}${sf_lred}"               ++////.  %s"
"${bold}${sf_white}  .++.o+"${bold}${sf_yellow}"++oo+:\`"${bold}${sf_lred}"             /dddhhh.  %s"
"${bold}${sf_yellow}       .+.o+oo:."${bold}${sf_lred}"          \`oddhhhh+   $mygtk"
"${bold}${sf_yellow}        \+.++o+o\`\`-\`\`"${bold}${sf_lred}"\`\`.:ohdhhhhh+    %s"
"${bold}${sf_yellow}         \`:o+++ "${bold}${sf_lred}"\`ohhhhhhhhyo++os:     %s"
"${bold}${sf_yellow}           .o:"${bold}${sf_lred}"\`.syhhhhhhh/"${bold}${sf_yellow}".oo++o\`     %s"
"${bold}${sf_lred}               /osyyyyyyo"${bold}${sf_yellow}"++ooo+++/"
"${bold}${sf_lred}                   \`\`\`\`\` "${bold}${sf_yellow}"+oo+++o\:"
"${bold}${sf_yellow}                          \`oo++.")
  ;;

  "Debian")
    startline="2"
    fulloutput=("  ${bold}${sf_white}       _,met\$\$\$\$\$gg."
"  ${bold}${sf_white}    ,g\$\$\$\$\$\$\$\$\$\$\$\$\$\$\$P."
"  ${bold}${sf_white}  ,g\$\$P\"\"       \"\"\"Y\$\$.\".\t %s"
"  ${bold}${sf_white} ,\$\$P'              \`\$\$\$.\t%s"
"  ${bold}${sf_white}',\$\$P       ,ggs.     \`\$\$b:\t%s"
"  ${bold}${sf_white}\`d\$\$'     ,\$P\"\'   "${bold}${sf_lred}"."${bold}${sf_white}"    \$\$\$\t%s"
"  ${bold}${sf_white} \$\$P      d\$\'     "${bold}${sf_lred}","${bold}${sf_white}"    \$\$P\t%s"
"  ${bold}${sf_white} \$\$:      \$\$.   "${bold}${sf_lred}"-"${bold}${sf_white}"    ,d\$\$'\t%s"
"  ${bold}${sf_white} \$\$\;      Y\$b._   _,d\$P'\t%s"
"  ${bold}${sf_white} Y\$\$.    "${bold}${sf_lred}"\`."${bold}${sf_white}"\`\"Y\$\$\$\$P\"'\t\t%s"
"  ${bold}${sf_white} \`\$\$b      "${bold}${sf_lred}"\"-.__\t\t%s"
"  ${bold}${sf_white}  \`Y\$\$\t\t\t%s"
"  ${bold}${sf_white}   \`Y\$\$.\t\t\t%s"
"  ${bold}${sf_white}     \`\$\$b.\t\t\t%s"
"  ${bold}${sf_white}       \`Y\$\$b.\t\t\t%s"
"  ${bold}${sf_white}          \`\"Y\$b._"
"  ${bold}${sf_white}              \`\"\"\"\"")
  ;;

  "CrunchBang")
    startline="1"
    fulloutput=("${bold}${sf_grey}                ___       ___      _"
"${bold}${sf_grey}               /  /      /  /     | |  %s"
"${bold}${sf_grey}              /  /      /  /      | | %s"
"${bold}${sf_grey}             /  /      /  /       | | %s"
"${bold}${sf_grey}     _______/  /______/  /______  | | %s"
"${bold}${sf_grey}    /______   _______   _______/  | | %s"
"${bold}${sf_grey}          /  /      /  /          | | %s"
"${bold}${sf_grey}         /  /      /  /           | | %s"
"${bold}${sf_grey}        /  /      /  /            | | %s"
"${bold}${sf_grey} ______/  /______/  /______       | | %s"
"${bold}${sf_grey}/_____   _______   _______/       | | %s"
"${bold}${sf_grey}     /  /      /  /               |_| %s"
"${bold}${sf_grey}    /  /      /  /                 _  %s"
"${bold}${sf_grey}   /  /      /  /                 | | %s"
"${bold}${sf_grey}  /__/      /__/                  |_|")
  ;;

  "Gentoo")
    startline="2"
    fulloutput=("${bold}${sf_lpurple}         -/oyddmdhs+:."
"${bold}${sf_lpurple}     -o"${bold}${sf_white}"dNMMMMMMMMNNmhy+"${bold}${sf_lpurple}"-\`"
"${bold}${sf_lpurple}   -y"${bold}${sf_white}"NMMMMMMMMMMMNNNmmdhy"${bold}${sf_lpurple}"+-           %s"
"${bold}${sf_lpurple} \`o"${bold}${sf_white}"mMMMMMMMMMMMMNmdmmmmddhhy"${bold}${sf_lpurple}"/\`       %s"
"${bold}${sf_lpurple} om"${bold}${sf_white}"MMMMMMMMMMMN"${bold}${sf_lpurple}"hhyyyo"${bold}${sf_white}"hmdddhhhd"${bold}${sf_lpurple}"o\`     %s"
"${bold}${sf_lpurple}.y"${bold}${sf_white}"dMMMMMMMMMMd"${bold}${sf_lpurple}"hs++so/s"${bold}${sf_white}"mdddhhhhdm"${bold}${sf_lpurple}"+\`   %s"
"${bold}${sf_lpurple} oy"${bold}${sf_white}"hdmNMMMMMMMN"${bold}${sf_lpurple}"dyooy"${bold}${sf_white}"dmddddhhhhyhN"${bold}${sf_lpurple}"d.  %s"
"${bold}${sf_lpurple}  :o"${bold}${sf_white}"yhhdNNMMMMMMMNNNmmdddhhhhhyym"${bold}${sf_lpurple}"Mh  %s"
"${bold}${sf_lpurple}    .:"${bold}${sf_white}"+sydNMMMMMNNNmmmdddhhhhhhmM"${bold}${sf_lpurple}"my  %s"
"${bold}${sf_lpurple}       /m"${bold}${sf_white}"MMMMMMNNNmmmdddhhhhhmMNh"${bold}${sf_lpurple}"s:  %s"
"${bold}${sf_lpurple}    \`o"${bold}${sf_white}"NMMMMMMMNNNmmmddddhhdmMNhs"${bold}${sf_lpurple}"+\`   %s"
"${bold}${sf_lpurple}  \`s"${bold}${sf_white}"NMMMMMMMMNNNmmmdddddmNMmhs"${bold}${sf_lpurple}"/.     %s"
"${bold}${sf_lpurple} /N"${bold}${sf_white}"MMMMMMMMNNNNmmmdddmNMNdso"${bold}${sf_lpurple}":\`       %s"
"${bold}${sf_lpurple}+M"${bold}${sf_white}"MMMMMMNNNNNmmmmdmNMNdso"${bold}${sf_lpurple}"/-          %s"
"${bold}${sf_lpurple}yM"${bold}${sf_white}"MNNNNNNNmmmmmNNMmhs+/"${bold}${sf_lpurple}"-\`              %s"
"${bold}${sf_lpurple}/h"${bold}${sf_white}"MMNNNNNNNNMNdhs++/"${bold}${sf_lpurple}"-\`"
"${bold}${sf_lpurple}\`/"${bold}${sf_white}"ohdmmddhys+++/:"${bold}${sf_lpurple}".\`"
"${bold}${sf_lpurple}  \`-//////:--.")
  ;;

  "Fedora")
    startline="3"
    fulloutput=("${bold}${sf_blue}           :/------------://"
"${bold}${sf_blue}        :------------------://"
"${bold}${sf_blue}      :-----------"${bold}${sf_white}"/shhdhyo/"${bold}${sf_blue}"-://"
"${bold}${sf_blue}    /-----------"${bold}${sf_white}"omMMMNNNMMMd/"${bold}${sf_blue}"-:/      %s"
"${bold}${sf_blue}   :-----------"${bold}${sf_white}"sMMMdo:/"${bold}${sf_blue}"       -:/    %s"
"${bold}${sf_blue}  :-----------"${bold}${sf_white}":MMMd"${bold}${sf_blue}"-------    --:/   %s"
"${bold}${sf_blue}  /-----------"${bold}${sf_white}":MMMy"${bold}${sf_blue}"-------    ---/   %s"
"${bold}${sf_blue} :------    --"${bold}${sf_white}"/+MMMh/"${bold}${sf_blue}"--        ---:  %s"
"${bold}${sf_blue} :---     "${bold}${sf_white}"oNMMMMMMMMMNho"${bold}${sf_blue}"     -----:  %s"
"${bold}${sf_blue} :--      "${bold}${sf_white}"+shhhMMMmhhy++"${bold}${sf_blue}"   ------:   %s"
"${bold}${sf_blue} :-      -----"${bold}${sf_white}":MMMy"${bold}${sf_blue}"--------------/   %s"
"${bold}${sf_blue} :-     ------"${bold}${sf_white}"/MMMy"${bold}${sf_blue}"-------------:    %s"
"${bold}${sf_blue} :-      ----"${bold}${sf_white}"/hMMM+"${bold}${sf_blue}"------------:     %s"
"${bold}${sf_blue} :--"${bold}${sf_white}":dMMNdhhdNMMNo"${bold}${sf_blue}"-----------:       %s"
"${bold}${sf_blue} :---"${bold}${sf_white}":sdNMMMMNds:"${bold}${sf_blue}"----------:         %s"
"${bold}${sf_blue} :------"${bold}${sf_white}":://:"${bold}${sf_blue}"-----------://          %s"
"${bold}${sf_blue} :--------------------://")
  ;;

  "BSD")
    startline="4"
    fulloutput=("${bold}${sf_lred}              ,        ,"
"${bold}${sf_lred}             /(        )\`"
"${bold}${sf_lred}             \ \___   / |"
"${bold}${sf_lred}             /- "${bold}${sf_white}"_"${bold}${sf_lred}"  \`-/  '"
"${bold}${sf_lred}            ("${bold}${sf_white}"/\/ \ "${bold}${sf_lred}"\   /\\       %s"
"${bold}${sf_white}            / /   |"${bold}${sf_lred}" \`    \\     %s"
"${bold}${sf_white}            O O   )"${bold}${sf_lred}" /    |     %s"
"${bold}${sf_white}            \`-^--'\`"${bold}${sf_lred}"<     '     %s"
"${bold}${sf_lred}           (_.)  _  )   /      %s"
"${bold}${sf_lred}            \`.___/\`    /       %s"
"${bold}${sf_lred}              \`-----' /        %s"
"${bold}${sf_white} <----.     "${bold}${sf_lred}"__/ __   \\         %s"
"${bold}${sf_white} <----|===="${bold}${sf_lred}"O}}}"${bold}${sf_white}"=="${bold}${sf_lred}"} \} \/"${bold}${sf_white}"====   %s"
"${bold}${sf_white} <----'    "${bold}${sf_lred}"\`--' \`.__,' \\       %s"
"${bold}${sf_lred}              |        |       %s"
"${bold}${sf_lred}               \       /       /\\ %s"
"${bold}${sf_lred}          ______( (_  / \______/  %s"
"${bold}${sf_lred}        ,'  ,-----'   |"
"${bold}${sf_lred}        \`--{__________)")
  ;;

  "Mandriva"|"Mandrake")
    startline="1"
    fulloutput=("${bold}${sf_yellow}                         \`\`"
"${bold}${sf_yellow}                        \`-.                 %s"
"${bold}${sf_blue}       \`               "${bold}${sf_yellow}".---                %s"
"${bold}${sf_blue}     -/               "${bold}${sf_yellow}"-::--\`               %s"
"${bold}${sf_blue}   \`++    "${bold}${sf_yellow}"\`----...\`\`\`-:::::.               %s"
"${bold}${sf_blue}  \`os.      "${bold}${sf_yellow}".::::::::::::::-\`\`\`     \`  \`   %s"
"${bold}${sf_blue}  +s+         "${bold}${sf_yellow}".::::::::::::::::---...--\`   %s"
"${bold}${sf_blue} -ss:          "${bold}${sf_yellow}"\`-::::::::::::::::-.\`\`.\`\`   %s"
"${bold}${sf_blue} /ss-           "${bold}${sf_yellow}".::::::::::::-.\`\`   \`      %s"
"${bold}${sf_blue} +ss:          "${bold}${sf_yellow}".::::::::::::-              %s"
"${bold}${sf_blue} /sso         "${bold}${sf_yellow}".::::::-::::::-              %s"
"${bold}${sf_blue} .sss/       "${bold}${sf_yellow}"-:::-.\`   .:::::              %s"
"${bold}${sf_blue}  /sss+.    "${bold}${sf_yellow}"..\`"${bold}${sf_blue}"  \`--\`    "${bold}${sf_yellow}".:::              %s"
"${bold}${sf_blue}   -ossso+/:://+/-\`        "${bold}${sf_yellow}".:\`             %s"
"${bold}${sf_blue}     -/+ooo+/-.              "${bold}${sf_yellow}"\`")
  ;;

  "OpenSuSe")
    startline="3"
    fulloutput=("${bold}${sf_white}             .;ldkO0000Okdl;."
"${bold}${sf_white}         .;d00xl:,'....';:ok00d;."
"${bold}${sf_white}       .d00l'                ,o00d."
"${bold}${sf_white}     .d0Kd."${bold}${sf_lgreen}" :Okxol:;'.          "${bold}${sf_white}":O0d.        %s"
"${bold}${sf_white}    'OK"${bold}${sf_lgreen}"KKK0kOKKKKKKKKKKOxo:'      "${bold}${sf_white}"lKO'      %s"
"${bold}${sf_white}   ,0K"${bold}${sf_lgreen}"KKKKKKKKKKKKKKK0d:"${bold}${sf_white}",,,"${bold}${sf_lgreen}":dx:"${bold}${sf_white}"    ;00,     %s"
"${bold}${sf_white}  .OK"${bold}${sf_lgreen}"KKKKKKKKKKKKKKKk."${bold}${sf_white}".oOkdl."${bold}${sf_lgreen}"'0k."${bold}${sf_white}"   cKO.    %s"
"${bold}${sf_white}  :KK"${bold}${sf_lgreen}"KKKKKKKKKKKKKKK: "${bold}${sf_white}"kKx..od "${bold}${sf_lgreen}"lKd"${bold}${sf_white}"   .OK:    %s"
"${bold}${sf_white}  dKK"${bold}${sf_lgreen}"KKKKKKKKKOx0KKKd "${bold}${sf_white}";0KKKO, "${bold}${sf_lgreen}"kKKc"${bold}${sf_white}"   dKd    %s"
"${bold}${sf_white}  dKK"${bold}${sf_lgreen}"KKKKKKKKKK;.;oOKx,.."${bold}${sf_white}"'"${bold}${sf_lgreen}"..;kKKK0."${bold}${sf_white}"  dKd    %s"
"${bold}${sf_white}  :KK"${bold}${sf_lgreen}"KKKKKKKKKK0o;...;cdxxOK0Oxc,.  "${bold}${sf_white}".0K:    %s"
"${bold}${sf_white}   kKK"${bold}${sf_lgreen}"KKKKKKKKKKKKK0xl;'......,cdo  "${bold}${sf_white}"lKk     %s"
"${bold}${sf_white}   '0K"${bold}${sf_lgreen}"KKKKKKKKKKKKKKKKKKKK00KKOo;  "${bold}${sf_white}"c00'     %s"
"${bold}${sf_white}    .kK"${bold}${sf_lgreen}"KKOxddxkOO00000Okxoc;'.   "${bold}${sf_white}".dKk.      %s"
"${bold}${sf_white}      l0Ko.                    .c00l.       %s"
"${bold}${sf_white}       .l0Kk:.              .;xK0l.         %s"
"${bold}${sf_white}          ,lkK0xl:;,,,,;:ldO0kl,"
"${bold}${sf_white}              .':ldxkkkkxdl:'.")
  ;;

  "Slackware")
    startline="4"
    fulloutput=("${bold}${sf_blue}                   :::::::"
"${bold}${sf_blue}             :::::::::::::::::::"
"${bold}${sf_blue}          :::::::::::::::::::::::::"
"${bold}${sf_blue}        ::::::::"${bold}${sf_white}"cllcccccllllllll"${bold}${sf_blue}"::::::"
"${bold}${sf_blue}     :::::::::"${bold}${sf_white}"lc               dc"${bold}${sf_blue}":::::::         %s"
"${bold}${sf_blue}    ::::::::"${bold}${sf_white}"cl   clllccllll    oc"${bold}${sf_blue}":::::::::      %s"
"${bold}${sf_blue}   :::::::::"${bold}${sf_white}"o   lc"${bold}${sf_blue}"::::::::"${bold}${sf_white}"co   oc"${bold}${sf_blue}"::::::::::     %s"
"${bold}${sf_blue}  ::::::::::"${bold}${sf_white}"o    cccclc"${bold}${sf_blue}":::::"${bold}${sf_white}"clcc"${bold}${sf_blue}"::::::::::::    %s"
"${bold}${sf_blue}  :::::::::::"${bold}${sf_white}"lc        cclccclc"${bold}${sf_blue}":::::::::::::    %s"
"${bold}${sf_blue} ::::::::::::::"${bold}${sf_white}"lcclcc          lc"${bold}${sf_blue}"::::::::::::   %s"
"${bold}${sf_blue} ::::::::::"${bold}${sf_white}"cclcc"${bold}${sf_blue}":::::"${bold}${sf_white}"lccclc     oc"${bold}${sf_blue}":::::::::::   %s"
"${bold}${sf_blue} ::::::::::"${bold}${sf_white}"o    l"${bold}${sf_blue}"::::::::::"${bold}${sf_white}"l    lc"${bold}${sf_blue}":::::::::::   %s"
"${bold}${sf_blue}  :::::"${bold}${sf_white}"cll"${bold}${sf_blue}":"${bold}${sf_white}"o     clcllcccll     o"${bold}${sf_blue}":::::::::::    %s"
"${bold}${sf_blue}  :::::"${bold}${sf_white}"occ"${bold}${sf_blue}":"${bold}${sf_white}"o                  clc"${bold}${sf_blue}":::::::::::    %s"
"${bold}${sf_blue}   ::::"${bold}${sf_white}"ocl"${bold}${sf_blue}":"${bold}${sf_white}"ccslclccclclccclclc"${bold}${sf_blue}":::::::::::::     %s"
"${bold}${sf_blue}    :::"${bold}${sf_white}"oclcccccccccccccllllllllllllll"${bold}${sf_blue}":::::      %s"
"${bold}${sf_blue}     ::"${bold}${sf_white}"lcc1lcccccccccccccccccccccccco"${bold}${sf_blue}"::::       %s"
"${bold}${sf_blue}       ::::::::::::::::::::::::::::::::     %s"
"${bold}${sf_blue}         ::::::::::::::::::::::::::::"
"${bold}${sf_blue}            ::::::::::::::::::::::"
"${bold}${sf_blue}                 ::::::::::::")
  ;;

  "Red Hat Linux")
    startline="2"
    fulloutput=("${bold}${sf_red}              \`.-..........\`"
"${bold}${sf_red}             \`////////::.\`-/."
"${bold}${sf_red}             -: ....-////////.               %s"
"${bold}${sf_red}             //:-::///////////\`             %s"
"${bold}${sf_red}      \`--::: \`-://////////////:             %s"
"${bold}${sf_red}      //////-    \`\`.-:///////// .\`          %s"
"${bold}${sf_red}      \`://////:-.\`    :///////::///:\`       %s"
"${bold}${sf_red}        .-/////////:---/////////////:       %s"
"${bold}${sf_red}           .-://////////////////////.       %s"
"${bold}${sf_white}          yMN+\`.-"${bold}${sf_red}"::///////////////-\`        %s"
"${bold}${sf_white}       .-\`:NMMNMs\`  \`..-------..\`           %s"
"${bold}${sf_white}        MN+/mMMMMMhoooyysshsss              %s"
"${bold}${sf_white} MMM    MMMMMMMMMMMMMMyyddMMM+              %s"
"${bold}${sf_white}  MMMM   MMMMMMMMMMMMMNdyNMMh\`     hyhMMM   %s"
"${bold}${sf_white}   MMMMMMMMMMMMMMMMyoNNNMMM+.   MMMMMMMM    %s"
"${bold}${sf_white}    MMNMMMNNMMMMMNM+ mhsMNyyyyMNMMMMsMM")
  ;;

  *)
    startline="1"
    fulloutput=(" "
"${bold}${sf_grey}         #####               %s"
"${bold}${sf_grey}        #######             %s"
"${bold}${sf_grey}        ##"${bold}${sf_white}"O"${bold}${sf_grey}"#"${bold}${sf_white}"O"${bold}${sf_grey}"##             %s"
"${bold}${sf_grey}        #"${bold}${sf_yellow}"#####"${bold}${sf_grey}"#             %s"
"${bold}${sf_grey}      ##"${bold}${sf_white}"##"${bold}${sf_yellow}"###"${bold}${sf_white}"##"${bold}${sf_grey}"##           %s"
"${bold}${sf_grey}     #"${bold}${sf_white}"##########"${bold}${sf_grey}"##          %s"
"${bold}${sf_grey}    #"${bold}${sf_white}"############"${bold}${sf_grey}"##         %s"
"${bold}${sf_grey}    #"${bold}${sf_white}"############"${bold}${sf_grey}"###        %s"
"${bold}${sf_yellow}   ##"${bold}${sf_grey}"#"${bold}${sf_white}"###########"${bold}${sf_grey}"##"${bold}${sf_yellow}"#        %s"
"${bold}${sf_yellow} ######"${bold}${sf_grey}"#"${bold}${sf_white}"#######"${bold}${sf_grey}"#"${bold}${sf_yellow}"######      %s"
"${bold}${sf_yellow} #######"${bold}${sf_grey}"#"${bold}${sf_white}"#####"${bold}${sf_grey}"#"${bold}${sf_yellow}"#######      %s"
"${bold}${sf_yellow}   #####"${bold}${sf_grey}"#######"${bold}${sf_yellow}"#####        %s"
"                        %s"
"${c0}")
  ;;
esac

# Truncate lines based on terminal width.
if [ "$truncateSet" == "Yes" ]; then
	n=${#fulloutput[*]}
	for ((i=0;i<n;i++)); do
		targetPercent=100
		termWidth=$(tput cols)
		# stringReal=$(echo "${fulloutput[i]}" | sed -e 's/\x1b\[[0-9];[0-9]*m\?//g')
		stringReal=$(echo "${fulloutput[i]}" | sed -e 's/\\e\[[0-9];[0-9]*m//g' -e 's/\\e\[[0-9]*m//g')
		stringLength=${#stringReal}
		targetLength="$((termWidth*targetPercent/100))"
		if [ "$stringLength" -le "$targetLength" ]; then
			echo -e "${fulloutput[i]}"$c0
		elif [ "$stringLength" -gt "$targetLength" ]; then
		 	echo "${fulloutput[i]:0:$targetLength}..."$c0
		fi
		# Debugging widths
		# echo "Term Width: $termWidth"
		# echo "String Length: $stringLength"
	done
else
	n=${#fulloutput[*]}
	for ((i=0;i<n;i++)); do
		# echo "${out_array[@]}"
		printf "${fulloutput[i]}$c0\n" "${out_array}"
		if [[ "$i" -ge "$startline" ]]; then
			unset out_array[0]
			out_array=( "${out_array[@]}" )
		fi
	done
fi
# Done with ASCII output
}

infoDisplay () {

  if [ -z "$textcolor" ]; then textcolor="\e[0m"; fi

  #TODO: Centralize colors and use them across the board so we only change them one place.
  if [ -z "$labelcolor" ]; then
    case $distro in
      "Arch Linux"|"Arch Linux - Old"|"Fedora"|"Mandriva"|"Mandrake") labelcolor="${sf_blue}";;
      "Mint"|"LMDE"|"OpenSuSe") labelcolor="${sf_lgreen}";;
      "Ubuntu"|"Debian"|"BSD") labelcolor="${sf_lred}";;
      "Red Hat Linux") labelcolor="${sf_red}";;
      "CrunchBang") labelcolor="${sf_grey}";;
      "Gentoo") labelcolor="${sf_lpurple}";;
      "Slackware") labelcolor="${sf_blue}";;
      *) labelcolor="${sf_yellow}";;
    esac 
  fi
    
  # Some verbosity stuff
  [[ "$verbosity" == "1" ]] && [[ "$screenshot" == "1" ]] && verboseOut "Screenshot will be taken after info is displayed."
  [[ "$verbosity" == "1" ]] && [[ "$hostshot" == "1" ]] && verboseOut "Screenshot will be transferred/uploaded to specified location."
  #########################
  # Info Variable Setting #
  #########################
  if [[ "${display[@]}" =~ "host" ]]; then myinfo=$(echo -e "${labelcolor}${myUser}$textcolor$bold@${labelcolor}${myHost}"); out_array=( "${out_array[@]}" "$myinfo" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "distro" ]]; then
    sysArch=`uname -m`
    if [ -n "$distro_more" ]; then mydistro=$(echo -e "$labelcolor OS:$textcolor $distro_more $sysArch")
    else mydistro=$(echo -e "$labelcolor OS:$textcolor${bold} $distro $sysArch"); fi
    out_array=( "${out_array[@]}" "$mydistro" )
    ((display_index++))
  fi
  if [[ "${display[@]}" =~ "kernel" ]]; then mykernel=$(echo -e "$labelcolor Kernel:$textcolor${bold} $kernel"); out_array=( "${out_array[@]}" "$mykernel" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "uptime" ]]; then myuptime=$(echo -e "$labelcolor Uptime:$textcolor${bold} $uptime"); out_array=( "${out_array[@]}" "$myuptime" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "shell" ]]; then myshell=$(echo -e "$labelcolor Shell:$textcolor${bold} $myShell"); out_array=( "${out_array[@]}" "$myshell" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "res" ]]; then myres=$(echo -e "$labelcolor Resolution:${textcolor}${bold} $xResolution"); out_array=( "${out_array[@]}" "$myres" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "de" ]]; then myde=$(echo -e "$labelcolor DE:$textcolor${bold} $DE"); out_array=( "${out_array[@]}" "$myde" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "wm" ]]; then mywm=$(echo -e "$labelcolor WM:$textcolor${bold} $WM"); out_array=( "${out_array[@]}" "$mywm" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "wmtheme" ]]; then mywmtheme=$(echo -e "$labelcolor WM Theme:$textcolor${bold} $Win_theme"); out_array=( "${out_array[@]}" "$mywmtheme" ); ((display_index++)); fi
  if [[ "${display[@]}" =~ "gtk" ]]; then 
    mygtk=$(echo -e "$labelcolor GTK Theme:$textcolor${bold} $gtkTheme"); out_array=( "${out_array[@]}" "$mygtk" ); ((display_index++))
    myicons=$(echo -e "$labelcolor Icon Theme:$textcolor${bold} $gtkIcons"); out_array=( "${out_array[@]}" "$myicons" ); ((display_index++))
    myfont=$(echo -e "$labelcolor Font:$textcolor${bold} $gtkFont"); out_array=( "${out_array[@]}" "$myfont" ); ((display_index++))
    [ "$gtkBackground" ] && mybg=$(echo -e "$labelcolor BG:$textcolor${bold} $gtkBackground"); out_array=( "${out_array[@]}" "$mybg" ); ((display_index++))
  fi
  if [[ "$display_type" == "ASCII" ]]; then
    asciiText
  else
    echo -e "$mydistro" 
    echo -e "$mykernel"
    echo -e "$myuptime"
    echo -e "$myshell"
    echo -e "$myres"
    echo -e "$myde"
    echo -e "$mywm"
    echo -e "$mywmtheme"
    echo -e "$mygtk"
    echo -e "$myicons"
    echo -e "$myfont"
  fi
}

########
# Theme Exporting (Experimental!)
########
themeExport () {
  WM=$(echo "$mywm" | awk '{print $NF}')
  if [[ ! -d /tmp/screenfetch-export ]]; then mkdir -p "/tmp/screenfetch-export/Icons" & mkdir -p "/tmp/screenfetch-export/GTK-Theme" & mkdir -p "/tmp/screenfetch-export/WM-${WM}" ; fi
  if [[ "$WM" ]]; then
    if [[ "$WM" =~ "Openbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Fluxbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.fluxbox/styles/$Win_theme" ]]; then
          cp -r "$HOME/.fluxbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Blackbox" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.blackbox/styles/$Win_theme" ]]; then
          cp -r "$HOME/.blackbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/blackbox/styles/$Win_theme" ]]; then
          cp -r "/usr/share/blackbox/styles/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "PekWM" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.pekwm/themes/$Win_theme" ]]; then
          cp -r "$HOME/.pekwm/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Metacity" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/themes/$Win_theme" ]]; then
          cp -r "/usr/share/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    elif [[ "$WM" =~ "Xfwm4" ]]; then
      if [[ "$Win_theme" != "Not Found" ]]; then
        WM_theme=$(echo "$Win_theme" | awk '{print $NF}')
        if [[ -d "$HOME/.themes/$Win_theme" ]]; then
          cp -r "$HOME/.themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        elif [[ -d "/usr/share/themes/$Win_theme" ]]; then
          cp -r "/usr/share/themes/$Win_theme" "/tmp/screenfetch-export/WM-${WM}/$Win_theme" &>/dev/null
          [[ "$verbosity" -eq "1" ]] && verboseOut "Found WM theme folder. Transferring to /tmp/screenfetch-export/..."
        fi
      fi
    fi
  fi
  if [[ "$gtkBackgroundFull" ]]; then
    cp "$gtkBackgroundFull" /tmp/screenfetch-export/
    [[ "$verbosity" -eq "1" ]] && verboseOut "Found BG file. Transferring to /tmp/screenfetch-export/..."
  fi
  if [[ "$mygtk" ]]; then
    GTK_theme=$(echo "$mygtk" | awk '{print $NF}')
    if [ -d "/usr/share/themes/$GTK_theme" ]; then
      cp -r "/usr/share/themes/$GTK_theme" "/tmp/screenfetch-export/GTK/Theme/$GTK_theme" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [[ "$myicons" ]]; then
    GTK_icons=$(echo "$myicons" | awk '{print $NF}')
    if [ -d "/usr/share/icons/$GTK_icons" ]; then
      cp -r "/usr/share/icons/$GTK_icons" "/tmp/screenfetch-export/GTK/Icons/$GTK_icons" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK icons theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
    if [ -d "$HOME/.icons/$GTK_icons" ]; then
      cp -r "$HOME/.icons/$GTK_icons" "/tmp/screenfetch-export/GTK/Icons/$GTK_icons" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK icons theme folder. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [[ "$myfont" ]]; then
    GTK_font=$(echo "$myfont" | awk '{print $NF}')
    if [ -d "/usr/share/fonts/$GTK_font" ]; then
      cp -r "/usr/share/fonts/$GTK_font" "/tmp/screenfetch-export/GTK/$GTK_font" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK font. Transferring to /tmp/screenfetch-export/..."
    elif [ -d "$HOME/.fonts/$GTK_font" ]; then
      cp -r "$HOME/.fonts/$GTK_font" "/tmp/screenfetch-export/GTK/$GTK_font" &>/dev/null
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found GTK font. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  if [ "$screenshot" == "1" ]; then
    if [ -f "${shotfile}" ]; then
      cp "${shotfile}" "/tmp/screenfetch-export/"
      [[ "$verbosity" -eq "1" ]] && verboseOut "Found screenshot. Transferring to /tmp/screenfetch-export/..."
    fi
  fi
  cd /tmp/screenfetch-export/
  [[ "$verbosity" -eq "1" ]] && verboseOut "Creating screenfetch-export.tar.gz archive in /tmp/screenfetch-export/...."
  tar -czf screenfetch-export.tar.gz ../screenfetch-export &>/dev/null
  mv /tmp/screenfetch-export/screenfetch-export.tar.gz $HOME/
  echo -e "${bold}==>${c0} Archive created in /tmp/ and moved to $HOME. Removing /tmp/screenfetch-export/..."
  rm -rf /tmp/screenfetch-export/
}


##################
# Let's Do This!
##################

for i in "${display[@]}"; do

	if [[ $i == wmtheme ]]; then
		detectwm
		detectwmtheme
	else
	
	  [[ "${display[*]}" =~ "$i" ]] && detect${i}

	fi
done
infoDisplay
[ "$screenshot" == "1" ] && takeShot
[ "$exportTheme" == "1" ] && themeExport
